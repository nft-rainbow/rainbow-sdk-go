openapi: 3.0.1
info:
  contact: {}
  description: The responses of the open api in swagger focus on the data field rather
    than the code and the message fields
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Rainbow-API
  version: "1.0"
servers:
- url: http://api.nftrainbow.cn/
- url: https://api.nftrainbow.cn/
paths:
  /dashboard/apps/{id}/nft/batch/by-meta-parts:
    post:
      description: Batch Mint a NFT by providing a file url to create the metadata
      operationId: AppBatchMintNFT
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: '#/components/schemas/services.AppMintByMetaPartsDto'
              type: array
        description: mint_meta
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.MintTask'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Batch Mint NFT with metadata parts
      tags:
      - Mints
      x-codegen-request-body-name: app_batch_mint_meta_info
  /dashboard/apps/{id}/nft/batch/by-meta-uri:
    post:
      description: Batch Mint a NFT by providing tokenIds and metadata urls to create
        the metadata
      operationId: AppBatchMintByMetaUri
      parameters:
      - description: Bearer JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.AppBatchMintByMetaUriDto'
        description: batch_mint_request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: integer
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Batch Mint NFT with metadata uri
      tags:
      - Mints
      x-codegen-request-body-name: batch_mint_request
  /dashboard/login:
    post:
      description: User login to get the JWT according to the email and password
      operationId: UserLogin
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/middlewares.UserLoginInfo'
        description: "login info, contain app_id and app_secret"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/middlewares.LoginResp'
          description: auth token
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Unauthorized
      summary: User login
      tags:
      - Login
      x-codegen-request-body-name: userLoginInfo
  /dashboard/refresh_token:
    get:
      description: Obtain a new JWT
      operationId: RefreshUserAuth
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/middlewares.LoginResp'
          description: refreshed auth token
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT
      tags:
      - Login
  /v1/accounts:
    get:
      description: Query web3 account
      operationId: QueryAccount
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - in: query
        name: phone
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.AccountDisplayPart'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Query web3 account
      tags:
      - Accounts
    post:
      description: Insert web3 account
      operationId: InsertAccount
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.InsertAccountReq'
        description: insert_account_req
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.AccountDisplayPart'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Insert web3 account
      tags:
      - Accounts
      x-codegen-request-body-name: insert_account_req
  /v1/burns:
    get:
      description: Get the NFT burned list information.
      operationId: GetBurnList
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.BurnTaskQueryResult'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Obtain the burned NFTs list
      tags:
      - Burns
    post:
      description: Burn NFT by admin
      operationId: BurnNft
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.BurnDto'
        description: burn_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.BurnTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Burn NFT
      tags:
      - Burns
      x-codegen-request-body-name: burn_dto
  /v1/burns/customizable/batch:
    post:
      description: Batch burn NFT by admin
      operationId: BurnBatch
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.BurnBatchDto'
        description: burn_batch_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.BurnTask'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Batch burn NFT
      tags:
      - Burns
      x-codegen-request-body-name: burn_batch_dto
  /v1/burns/{id}:
    get:
      description: Get NFT Burn detail info
      operationId: GetBurnDetail
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.BurnTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Burn NFT detail
      tags:
      - Burns
  /v1/contracts/:
    get:
      description: Get the contract list containing the contracts deployed through
        the specified app.
      operationId: ListContracts
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: integer
      - description: limit
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ContractTaskQueryResult'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Obtain contract list
      tags:
      - Contract
    post:
      description: |-
        Deploy a ERC721 or ERC1155 contract.
        Deploy a ERC721 or ERC1155 contract.
      operationId: DeployContract
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.ContractDeployDto'
        description: contract_info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Contract'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      - ApiKeyAuth: []
      summary: Deploy contract
      tags:
      - Contract
      - Contract
      x-codegen-request-body-name: contract_info
  /v1/contracts/detail/{id}:
    get:
      description: Get Contract info
      operationId: GetContractInfo
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Contract'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Contract detail
      tags:
      - Contract
  /v1/contracts/{address}/admin:
    get:
      description: Get Contract Admin
      operationId: GetContractAdmin
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Admin address
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: "Get administrator of contract, only work on conflux chain"
      tags:
      - Contract
    put:
      description: "Update administrator of contract, only work on conflux chain"
      operationId: UpdateContractAdmin
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.ContractAdminUpdateDto'
        description: contract admin update info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SendTxResp'
          description: Transaction id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Update administrator of contract
      tags:
      - Contract
      x-codegen-request-body-name: admin_info
  /v1/contracts/{address}/config/auto-sponsor:
    get:
      description: Get contract auto sponsor config
      operationId: GetContractAutoSponsor
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.AutoSponsorContract'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Get contract auto sponsor config
      tags:
      - Contract
    post:
      description: Set contract auto sponsor config
      operationId: SetContractAutoSponsor
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.ContractAutoSponsorReq'
        description: contract auto sponsor config
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gin.H'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Set contract auto sponsor config
      tags:
      - Contract
      x-codegen-request-body-name: auto_sponsor_req
  /v1/contracts/{address}/config/transaferable:
    post:
      description: Set Contract TransaferableByAdmin and TransaferableByUser Config
      operationId: SetContractTransaferable
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SendTxResp'
          description: Transaction id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Set Contract Transaferable Config
      tags:
      - Contract
  /v1/contracts/{address}/profile:
    get:
      description: "Get contract runtime profile, contains contract info and currently\
        \ minted/minting max token id"
      operationId: GetContractProfile
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: the returned max token id will ignore the token ids
        in: query
        name: ignore_token_ids
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ContractRuntimeProfile'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Get contract runtime profile
      tags:
      - Contract
  /v1/contracts/{address}/sponsor:
    get:
      description: Get the sponsor of the specified contract according to address.
      operationId: GetContractSponsorInfo
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: chain
        in: query
        name: chain
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SponsorInfo'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid address
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Query sponsor
      tags:
      - Contract
    post:
      description: "Set the sponsor for a contract according to the address with specified\
        \ value(gas-1, storage-50)"
      operationId: SetContractSponsor
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: "chain: conflux, conflux_test(default)"
        in: query
        name: chain
        schema:
          type: string
      - description: "Open auto sponsor or not, for mainnet contract keep user account\
          \ have enough balance"
        in: query
        name: auto_sponsor
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SetSponsorResp'
          description: "Transaction id\"\t\"success"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid address
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Set sponsor
      tags:
      - Contract
  /v1/contracts/{address}/sponsor/whitelist:
    delete:
      description: "Remove contract sponsored whitelist, only work on conflux chain"
      operationId: RemoveContractSponsorWhitelist
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
        description: Removing sponsor whitelist
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SendTxResp'
          description: Transaction id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Remove contract sponsored whitelist
      tags:
      - Contract
      x-codegen-request-body-name: users
    get:
      description: "Get contract sponsored whitelist, only work on conflux chain"
      operationId: GetContractSponsoredWhitelist
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Contract sponsored whitelist
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Get contract sponsored whitelist
      tags:
      - Contract
    post:
      description: "Add contract sponsored whitelist, only work on conflux chain"
      operationId: AddContractSponsorWhitelist
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
        description: Adding sponsor whitelist
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.SendTxResp'
          description: Transaction id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Add contract sponsored whitelist
      tags:
      - Contract
      x-codegen-request-body-name: users
  /v1/files/:
    get:
      description: Get the file list containing the info of the files uploaded in
        the specified app
      operationId: ListFiles
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: string
      - description: limit
        in: query
        name: limit
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.FilesQueryResult'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Obtain file list
      tags:
      - Files
    post:
      description: "Upload a file which can be a video, an image and so on"
      operationId: UploadFile
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.UploadFilesResponse'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Upload file
      tags:
      - Files
  /v1/files/folder:
    post:
      description: "Upload a folder containing the files which can be a video, an\
        \ image and so on"
      operationId: UploadFolder
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFolder_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.UploadFolderResponse'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Upload folder
      tags:
      - Files
  /v1/files/folder/oss:
    post:
      description: "Upload a folder containing the files which can be a video, an\
        \ image and so on, to oss"
      operationId: UploadFolderToOSS
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFolder_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.UploadFolderResponse'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Upload folder to oss
      tags:
      - Files
  /v1/files/oss:
    post:
      description: "Upload a file to OSS, which can be a video, an image and so on"
      operationId: UploadFileToOss
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.UploadFilesResponse'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Upload file to OSS
      tags:
      - Files
  /v1/login:
    post:
      description: Login the app to get the JWT according to the app_id and app_secret
      operationId: LoginApp
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/middlewares.AppLoginInfo'
        description: "login info, contain app_id and app_secret"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/middlewares.LoginResp'
          description: auth token
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Unauthorized
      summary: App login
      tags:
      - Login
      x-codegen-request-body-name: appLoginInfo
  /v1/metadata/:
    get:
      description: Get the metadata list containing the info of the metadata created
        in the specified app
      operationId: ListMetadatas
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: string
      - description: limit
        in: query
        name: limit
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ExposedMetadataQueryResult'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Obtain metadata list
      tags:
      - Metadata
    post:
      description: "Create NFT metadata by providing the info including name, description\
        \ and so on"
      operationId: CreateMetadata
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.MetadataDto'
        description: metadata_info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ExposedMetadata'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Create NFT metadata
      tags:
      - Metadata
      x-codegen-request-body-name: metadata_info
  /v1/metadata/{metadata_id}:
    get:
      description: Query the metadata according to metadata_id
      operationId: GetMetadatInfo
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: metadata_id
        in: path
        name: metadata_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ExposedMetadata'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Query metadata
      tags:
      - Metadata
  /v1/mints/:
    get:
      description: |-
        Get the NFT list containing the NFTs minted in the specified app
        Get the NFT list containing the NFTs minted in the specified app
      operationId: ListMints
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: integer
      - description: limit
        in: query
        name: limit
        schema:
          type: integer
      - description: contract
        in: query
        name: contract
        schema:
          type: string
      - description: mint_to
        in: query
        name: mint_to
        schema:
          type: string
      - description: status
        in: query
        name: status
        schema:
          type: integer
      - description: chain
        in: query
        name: chain
        schema:
          type: string
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: integer
      - description: limit
        in: query
        name: limit
        schema:
          type: integer
      - description: contract
        in: query
        name: contract
        schema:
          type: string
      - description: mint_to
        in: query
        name: mint_to
        schema:
          type: string
      - description: status
        in: query
        name: status
        schema:
          type: integer
      - description: chain
        in: query
        name: chain
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTaskQueryResult'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      - ApiKeyAuth: []
      summary: Obtain NFT list
      tags:
      - Mints
      - Mints
    post:
      description: Mint a NFT by providing a metadata url
      operationId: CustomMint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.CustomMintDto'
        description: custom_mint_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Mint NFT
      tags:
      - Mints
      x-codegen-request-body-name: custom_mint_dto
  /v1/mints/customizable/batch:
    post:
      description: Mint several NFTs once
      operationId: BatchCustomMint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.CustomMintBatchDto'
        description: custom_mint_batch_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.MintTask'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Batch Mint NFTs
      tags:
      - Mints
      x-codegen-request-body-name: custom_mint_batch_dto
  /v1/mints/easy/files:
    post:
      description: "Mint a NFT by uploading a file which can be a video, image and\
        \ so on"
      operationId: EasyMintByFile
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EasyMintByFile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Mint NFT with file
      tags:
      - Mints
  /v1/mints/easy/urls:
    post:
      description: Mint a NFT by providing a file url to create the metadata
      operationId: EasyMintByMetadata
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.EasyMintMetaPartsDto'
        description: easy_mint_meta_info
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Mint NFT with metadata
      tags:
      - Mints
      x-codegen-request-body-name: easy_mint_meta_info
  /v1/mints/{id}:
    get:
      description: Get NFT detail info
      operationId: GetMintDetail
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Mint NFT detail
      tags:
      - Mints
  /v1/mints/{id}/reMint:
    post:
      description: Reset mint task status to init so that it can be minted again
      operationId: ReMintNFT
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.MintTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Reset mint task status to init so that it can be minted again
      tags:
      - Mints
  /v1/nft/count/{address}/{token_id}/{holder}:
    get:
      description: Get NFT hold count by address
      operationId: NFTHoldCount
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: contract address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        schema:
          type: string
      - description: holder address
        in: path
        name: holder
        required: true
        schema:
          type: string
      - description: "contract type erc721, erc1155, default is erc721"
        in: query
        name: type
        schema:
          type: string
      - description: "epoch height, default is latest_state"
        in: query
        name: epoch_height
        schema:
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: integer
                type: object
          description: count
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Get NFT hold count by address
      tags:
      - NFTs
  /v1/nft/{address}/{token_id}:
    get:
      description: "Get NFT info, mainly owner and metadata"
      operationId: NftInfo
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        schema:
          type: string
      - description: "contract type erc721, erc1155, default is erc721"
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.NFT'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: "Get NFT info, mainly owner and metadata"
      tags:
      - NFTs
  /v1/nft/{address}/{token_id}/tokenUri:
    put:
      description: Update NFT token uri
      operationId: UpdateNftTokenUri
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: address
        in: path
        name: address
        required: true
        schema:
          type: string
      - description: token_id
        in: path
        name: token_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/routers.UpdateTokenUriReq'
        description: req
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.Transaction'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
      security:
      - ApiKeyAuth: []
      summary: Update NFT token uri
      tags:
      - NFTs
      x-codegen-request-body-name: req
  /v1/refresh_token:
    get:
      description: Obtain a new JWT
      operationId: RefreshAppAuth
      parameters:
      - description: Bearer openapi_token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/middlewares.LoginResp'
          description: refreshed auth token
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT
      tags:
      - Login
  /v1/tba/accounts:
    get:
      description: "Get token bound accounts based on contract, token_id, implementation,\
        \ chain type, and chain id"
      operationId: TBAQueryEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: "Chain name, should be either conflux or conflux_test"
        in: query
        name: chain
        required: true
        schema:
          type: string
      - description: The implementation contract address of the tba. Will throw an
          error if the implementation is not in whitelist
        in: query
        name: implementation
        schema:
          type: string
      - description: Token contract address of the bounded NFT
        in: query
        name: contract
        schema:
          type: string
      - description: Token ID
        in: query
        name: token_id
        schema:
          type: string
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      - description: Limit per page
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TokenBoundAccountQueryResult'
          description: Token bound accounts information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Get all token bound accounts on chain
      tags:
      - TBA
    post:
      description: Create a new token bound account based on provided parameters.  Can
        optionally specify which collection to add. Will fail if the tba is already
        created or in the queue
      operationId: TBACreationEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/models.TBACreateDto'
        description: Token Bound Account creation details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TBACreationTask'
          description: Token bound account creation task information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Create a new token bound account (TBA)
      tags:
      - TBA
      x-codegen-request-body-name: tbaCreateDto
  /v1/tba/collections:
    get:
      description: "Query TBA collections based on chain, and collection name"
      operationId: TBACollectionQueryEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: The chain type. The types include `conflux` and `conflux_test`
        in: query
        name: chain
        required: true
        schema:
          type: string
      - description: Collection name
        in: query
        name: name
        schema:
          type: string
      - description: Page number
        in: query
        name: page
        schema:
          type: integer
      - description: Limit per page
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TokenBoundAccountCollectionQueryResult'
          description: TBA collections information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Query token bound account (TBA) collections
      tags:
      - TBA
    post:
      description: Create a new token bound account collection based on provided details.
      operationId: TBACollectionEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/models.TBACollectionCreateDto'
        description: TBA Collection creation details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TokenBoundAccountCollectionQueryResult'
          description: Successful creation of TBA collection
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Create a new TBA collection
      tags:
      - TBA
      x-codegen-request-body-name: createDto
  /v1/tba/collections/{collection_name}:
    put:
      description: Modify the name and description of a TBA collection based on the
        provided details
      operationId: TBACollectionMetaInfoModificationEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Name of the TBA collection to be modified
        in: path
        name: collection_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/models.TBACollectionModifyDto'
        description: Modification details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gin.H'
          description: Modification successful
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Modify meta information of a TBA collection
      tags:
      - TBA
      x-codegen-request-body-name: modifyDto
  /v1/tba/collections/{collection_name}/items:
    delete:
      description: "Remove specified accounts from a TBA collection based on the provided\
        \ details. This api will ignore the error if the specified item is not in\
        \ the collection. If any other error occurs, none of the specified items will\
        \ be deleted."
      operationId: TBACollectionRemoveItemsEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Name of the TBA collection to remove items from
        in: path
        name: collection_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/models.TBACollectionItemsDto'
        description: Details of the accounts to be removed
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gin.H'
          description: Removal successful
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Remove items from a TBA collection
      tags:
      - TBA
      x-codegen-request-body-name: itemsDto
    post:
      description: "Add new accounts to a specified TBA collection based on the provided\
        \ details. This api will ignore the error that the account is already in the\
        \ collection. If any other error occurs, none of the specified tbas will be\
        \ added to the collection."
      operationId: TBACollectionNewItemsEndpoint
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Name of the TBA collection to add items to
        in: path
        name: collection_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/models.TBACollectionItemsDto'
        description: Details of the accounts to be added
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gin.H'
          description: Addition successful
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Business error
      security:
      - ApiKeyAuth: []
      summary: Add new items to a TBA collection
      tags:
      - TBA
      x-codegen-request-body-name: itemsDto
  /v1/transfers/:
    get:
      description: Get the NFT list containing the transferred NFT information.
      operationId: ListTransfer
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: page
        in: query
        name: page
        schema:
          type: integer
      - description: limit
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TransferTaskQueryResult'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Obtain the transferred NFTs list
      tags:
      - Transfers
  /v1/transfers/customizable:
    post:
      description: Transfer NFT by admin
      operationId: TransferNft
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.TransferDto'
        description: transfer_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TransferTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Transfer NFT
      tags:
      - Transfers
      x-codegen-request-body-name: transfer_dto
  /v1/transfers/customizable/batch:
    post:
      description: Transfer several NFTs once
      operationId: BatchTransferNft
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/services.TransferBatchDto'
        description: transfer_batch_dto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/models.TransferTask'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Batch Transfer NFTs
      tags:
      - Transfers
      x-codegen-request-body-name: transfer_batch_dto
  /v1/transfers/{id}:
    get:
      description: Get NFT Transfer detail info
      operationId: GetTransferDetail
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: id
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.TransferTask'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
      security:
      - ApiKeyAuth: []
      summary: Transfer NFT detail
      tags:
      - Transfers
  /v1/tx/{id}:
    get:
      description: Get transaction informantion by ID
      operationId: GetTransactionByID
      parameters:
      - description: Bearer Open_JWT
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Transaction ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/services.TxResp'
          description: Transaction informantion
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Internal Server error
        "599":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rainbow_errors.RainbowErrorDetailInfo'
          description: Businesss error
      security:
      - ApiKeyAuth: []
      summary: Get transaction informantion by ID
      tags:
      - Transaction
components:
  schemas:
    enums.TransactionBlockReason:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      type: integer
      x-enum-varnames:
      - TX_BLOCK_REASON_DB_ERR
      - TX_BLOCK_REASON_SPONSORING
      - TX_BLOCK_REASON_IO_ERR
      - TX_BLOCK_REASON_NOT_ENOUGH_CASH
      - TX_BLOCK_REASON_FAILED_GET_SPONSOR_INFO
      - TX_BLOCK_REASON_SPONSOR_NOT_ENOUGH
    gin.H:
      additionalProperties:
        type: object
      type: object
    gorm.DeletedAt:
      example:
        valid: true
        time: time
      properties:
        time:
          type: string
        valid:
          description: Valid is true if Time is not NULL
          type: boolean
      type: object
    middlewares.AppLoginInfo:
      properties:
        app_id:
          type: string
        app_secret:
          type: string
      required:
      - app_id
      - app_secret
      type: object
    middlewares.LoginResp:
      example:
        expire: expire
        token: token
      properties:
        expire:
          type: string
        token:
          type: string
      type: object
    middlewares.UserLoginInfo:
      properties:
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    models.AccountDisplayPart:
      example:
        conflux_testnet_address: conflux_testnet_address
        phone: phone
        conflux_mainnet_address: conflux_mainnet_address
      properties:
        conflux_mainnet_address:
          type: string
        conflux_testnet_address:
          type: string
        phone:
          type: string
      type: object
    models.AutoSponsorContract:
      example:
        storage_recharge_amount: 1
        address: address
        updated_at: updated_at
        user_id: 5
        contract_id: 0
        storage_recharge_threshold: 5
        auto_sponsor: true
        created_at: created_at
        id: 6
        deleted_at:
          valid: true
          time: time
      properties:
        address:
          type: string
        auto_sponsor:
          type: boolean
        contract_id:
          description: useless
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        id:
          type: integer
        storage_recharge_amount:
          type: integer
        storage_recharge_threshold:
          type: integer
        updated_at:
          type: string
        user_id:
          type: integer
      type: object
    models.BurnTask:
      example:
        amount: 6
        chain_type: 5
        chain_id: 5
        contract: contract
        block_reason: "{}"
        created_at: created_at
        error: error
        tx_id: 3
        deleted_at:
          valid: true
          time: time
        contract_type: 2
        token_id: token_id
        updated_at: updated_at
        id: 7
        app_id: 1
        user: user
        hash: hash
        status: 9
      properties:
        amount:
          type: integer
        app_id:
          type: integer
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chain_id:
          type: integer
        chain_type:
          type: integer
        contract:
          type: string
        contract_type:
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        error:
          type: string
        hash:
          type: string
        id:
          type: integer
        status:
          description: "0-pending, 1-success, 2-failed"
          type: integer
        token_id:
          type: string
        tx_id:
          type: integer
        updated_at:
          type: string
        user:
          type: string
      type: object
    models.BurnTaskQueryResult:
      example:
        count: 0
        items:
        - amount: 6
          chain_type: 5
          chain_id: 5
          contract: contract
          block_reason: "{}"
          created_at: created_at
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 2
          token_id: token_id
          updated_at: updated_at
          id: 7
          app_id: 1
          user: user
          hash: hash
          status: 9
        - amount: 6
          chain_type: 5
          chain_id: 5
          contract: contract
          block_reason: "{}"
          created_at: created_at
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 2
          token_id: token_id
          updated_at: updated_at
          id: 7
          app_id: 1
          user: user
          hash: hash
          status: 9
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.BurnTask'
          type: array
      type: object
    models.Contract:
      example:
        symbol: symbol
        chain_type: 5
        tokens_transferable_by_admin: true
        address: address
        chain_id: 1
        transfer_cooldown_time: 9
        block_reason: "{}"
        created_at: created_at
        owner_address: owner_address
        royalties_address: royalties_address
        error: error
        royalties_bps: 2
        tx_id: 3
        type: 2
        deleted_at:
          valid: true
          time: time
        updated_at: updated_at
        base_uri: base_uri
        name: name
        auto_sponsor: true
        id: 5
        tokens_transferable_by_user: true
        app_id: 6
        hash: hash
        status: 7
      properties:
        address:
          type: string
        app_id:
          type: integer
        auto_sponsor:
          type: boolean
        base_uri:
          type: string
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chain_id:
          type: integer
        chain_type:
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        error:
          type: string
        hash:
          type: string
        id:
          type: integer
        name:
          type: string
        owner_address:
          type: string
        royalties_address:
          type: string
        royalties_bps:
          type: integer
        status:
          description: "0-pending, 1-success, 2-failed"
          type: integer
        symbol:
          type: string
        tokens_transferable_by_admin:
          type: boolean
        tokens_transferable_by_user:
          type: boolean
        transfer_cooldown_time:
          type: integer
        tx_id:
          type: integer
        type:
          description: "1-ERC721, 2-ERC1155"
          type: integer
        updated_at:
          type: string
      type: object
    models.ContractRuntimeProfile:
      example:
        contract:
          symbol: symbol
          chain_type: 5
          tokens_transferable_by_admin: true
          address: address
          chain_id: 1
          transfer_cooldown_time: 9
          block_reason: "{}"
          created_at: created_at
          owner_address: owner_address
          royalties_address: royalties_address
          error: error
          royalties_bps: 2
          tx_id: 3
          type: 2
          deleted_at:
            valid: true
            time: time
          updated_at: updated_at
          base_uri: base_uri
          name: name
          auto_sponsor: true
          id: 5
          tokens_transferable_by_user: true
          app_id: 6
          hash: hash
          status: 7
        max_token_id: 0
      properties:
        contract:
          $ref: '#/components/schemas/models.Contract'
        max_token_id:
          type: integer
      type: object
    models.ContractTaskQueryResult:
      example:
        count: 0
        items:
        - symbol: symbol
          chain_type: 5
          tokens_transferable_by_admin: true
          address: address
          chain_id: 1
          transfer_cooldown_time: 9
          block_reason: "{}"
          created_at: created_at
          owner_address: owner_address
          royalties_address: royalties_address
          error: error
          royalties_bps: 2
          tx_id: 3
          type: 2
          deleted_at:
            valid: true
            time: time
          updated_at: updated_at
          base_uri: base_uri
          name: name
          auto_sponsor: true
          id: 5
          tokens_transferable_by_user: true
          app_id: 6
          hash: hash
          status: 7
        - symbol: symbol
          chain_type: 5
          tokens_transferable_by_admin: true
          address: address
          chain_id: 1
          transfer_cooldown_time: 9
          block_reason: "{}"
          created_at: created_at
          owner_address: owner_address
          royalties_address: royalties_address
          error: error
          royalties_bps: 2
          tx_id: 3
          type: 2
          deleted_at:
            valid: true
            time: time
          updated_at: updated_at
          base_uri: base_uri
          name: name
          auto_sponsor: true
          id: 5
          tokens_transferable_by_user: true
          app_id: 6
          hash: hash
          status: 7
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.Contract'
          type: array
      type: object
    models.ExposedFile:
      example:
        file_url: file_url
        updated_at: updated_at
        file_name: file_name
        file_type: file_type
        created_at: created_at
        id: 1
        deleted_at:
          valid: true
          time: time
        file_size: 6
      properties:
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        file_name:
          type: string
        file_size:
          type: integer
        file_type:
          type: string
        file_url:
          type: string
        id:
          type: integer
        updated_at:
          type: string
      type: object
    models.ExposedMetadata:
      example:
        image: image
        animation_url: animation_url
        created_at: created_at
        description: description
        deleted_at:
          valid: true
          time: time
        uri: uri
        external_link: external_link
        updated_at: updated_at
        metadata_id: metadata_id
        name: name
        attributes:
        - display_type: display_type
          attribute_name: attribute_name
          value: value
          trait_type: trait_type
        - display_type: display_type
          attribute_name: attribute_name
          value: value
          trait_type: trait_type
        id: 1
        app_id: 6
      properties:
        animation_url:
          type: string
        app_id:
          type: integer
        attributes:
          items:
            $ref: '#/components/schemas/models.ExposedMetadataAttribute'
          type: array
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        description:
          type: string
        external_link:
          type: string
        id:
          type: integer
        image:
          type: string
        metadata_id:
          type: string
        name:
          type: string
        updated_at:
          type: string
        uri:
          type: string
      required:
      - description
      - image
      - name
      type: object
    models.ExposedMetadataAttribute:
      example:
        display_type: display_type
        attribute_name: attribute_name
        value: value
        trait_type: trait_type
      properties:
        attribute_name:
          type: string
        display_type:
          type: string
        trait_type:
          type: string
        value:
          description: TODO support number
          type: string
      type: object
    models.ExposedMetadataQueryResult:
      example:
        count: 0
        items:
        - image: image
          animation_url: animation_url
          created_at: created_at
          description: description
          deleted_at:
            valid: true
            time: time
          uri: uri
          external_link: external_link
          updated_at: updated_at
          metadata_id: metadata_id
          name: name
          attributes:
          - display_type: display_type
            attribute_name: attribute_name
            value: value
            trait_type: trait_type
          - display_type: display_type
            attribute_name: attribute_name
            value: value
            trait_type: trait_type
          id: 1
          app_id: 6
        - image: image
          animation_url: animation_url
          created_at: created_at
          description: description
          deleted_at:
            valid: true
            time: time
          uri: uri
          external_link: external_link
          updated_at: updated_at
          metadata_id: metadata_id
          name: name
          attributes:
          - display_type: display_type
            attribute_name: attribute_name
            value: value
            trait_type: trait_type
          - display_type: display_type
            attribute_name: attribute_name
            value: value
            trait_type: trait_type
          id: 1
          app_id: 6
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.ExposedMetadata'
          type: array
      type: object
    models.FilesQueryResult:
      example:
        count: 0
        items:
        - file_url: file_url
          updated_at: updated_at
          file_name: file_name
          file_type: file_type
          created_at: created_at
          id: 1
          deleted_at:
            valid: true
            time: time
          file_size: 6
        - file_url: file_url
          updated_at: updated_at
          file_name: file_name
          file_type: file_type
          created_at: created_at
          id: 1
          deleted_at:
            valid: true
            time: time
          file_size: 6
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.ExposedFile'
          type: array
      type: object
    models.MintTask:
      example:
        mint_to: mint_to
        amount: 0
        chain_type: 5
        chain_id: 1
        contract: contract
        block_reason: "{}"
        created_at: created_at
        error: error
        tx_id: 3
        deleted_at:
          valid: true
          time: time
        contract_type: 5
        token_uri: token_uri
        token_id: token_id
        updated_at: updated_at
        mint_type: 7
        id: 2
        app_id: 6
        hash: hash
        status: 9
      properties:
        amount:
          type: integer
        app_id:
          type: integer
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chain_id:
          type: integer
        chain_type:
          type: integer
        contract:
          type: string
        contract_type:
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        error:
          type: string
        hash:
          type: string
        id:
          type: integer
        mint_to:
          type: string
        mint_type:
          type: integer
        status:
          description: "0-pending, 1-success, 2-failed"
          type: integer
        token_id:
          type: string
        token_uri:
          type: string
        tx_id:
          type: integer
        updated_at:
          type: string
      type: object
    models.MintTaskQueryResult:
      example:
        count: 0
        items:
        - mint_to: mint_to
          amount: 0
          chain_type: 5
          chain_id: 1
          contract: contract
          block_reason: "{}"
          created_at: created_at
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 5
          token_uri: token_uri
          token_id: token_id
          updated_at: updated_at
          mint_type: 7
          id: 2
          app_id: 6
          hash: hash
          status: 9
        - mint_to: mint_to
          amount: 0
          chain_type: 5
          chain_id: 1
          contract: contract
          block_reason: "{}"
          created_at: created_at
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 5
          token_uri: token_uri
          token_id: token_id
          updated_at: updated_at
          mint_type: 7
          id: 2
          app_id: 6
          hash: hash
          status: 9
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.MintTask'
          type: array
      type: object
    models.TBACollectionCreateDto:
      properties:
        chain:
          description: The chain type. The types include `conflux`` and `conflux_test``
          type: string
        description:
          description: The collection description
          type: string
        name:
          description: The name of the collection. Should be unique for the user.
          type: string
      required:
      - chain
      - name
      type: object
    models.TBACollectionItemsDto:
      properties:
        accounts:
          description: Addresses of the specified tbas. Will throw an error if the
            tba is not created yet
          items:
            type: string
          type: array
      required:
      - accounts
      type: object
    models.TBACollectionModifyDto:
      properties:
        new_description:
          type: string
        new_name:
          type: string
      type: object
    models.TBACreateDto:
      properties:
        chain:
          description: The chain type. The types include `conflux`` and `conflux_test``
          type: string
        collection_to_add:
          description: the collection to add after the tba is created. Will create
            the collection if it is not created yet.
          type: string
        salt:
          description: salt parameter to adjust tba address
          type: string
        token_contract:
          description: address of the nft contract
          type: string
        token_id:
          description: token id of nft
          type: string
      required:
      - chain
      - token_contract
      - token_id
      type: object
    models.TBACreationTask:
      example:
        chain_type: 1
        salt: salt
        chain_id: 6
        precomputed_address: precomputed_address
        contract: contract
        implementation: implementation
        block_reason: "{}"
        created_at: created_at
        token_contract: token_contract
        error: error
        tx_id: 9
        deleted_at:
          valid: true
          time: time
        collection_to_add: collection_to_add
        contract_type: 5
        token_contract_chain_id: 7
        token_id: token_id
        updated_at: updated_at
        user_id: 3
        id: 5
        app_id: 0
        hash: hash
        status: 2
      properties:
        app_id:
          type: integer
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chain_id:
          type: integer
        chain_type:
          type: integer
        collection_to_add:
          description: the collection to add after the tba is created
          type: string
        contract:
          type: string
        contract_type:
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        error:
          type: string
        hash:
          type: string
        id:
          type: integer
        implementation:
          description: tba implementation address
          type: string
        precomputed_address:
          description: the precomputed tba address
          type: string
        salt:
          type: string
        status:
          description: "0-pending, 1-success, 2-failed"
          type: integer
        token_contract:
          description: the nft token contract address
          type: string
        token_contract_chain_id:
          description: the chain id of the token contract
          type: integer
        token_id:
          description: the token id of the nft
          type: string
        tx_id:
          type: integer
        updated_at:
          type: string
        user_id:
          description: the user created the task
          type: integer
      type: object
    models.TaskType:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      type: integer
      x-enum-varnames:
      - TASK_TYPE_DEPLOY
      - TASK_TYPE_MINT
      - TASK_TYPE_MINT_BATCH
      - TASK_TYPE_TRANSFER
      - TASK_TYPE_TRANSFER_BATCH
      - TASK_TYPE_BURN
      - TASK_TYPE_BURN_BATCH
      - TASK_TYPE_UPDATE_ADMIN
      - TASK_TYPE_SPONSOR_BALANCE
      - TASK_TYPE_SPONSOR_PRIVILEGE
      - TASK_TYPE_UPDATE_TOKEN_URI
      - TASK_TYPE_CREATE_TBA
    models.TokenBoundAccount:
      example:
        token_contract_chain_id: 5
        chain_type: 1
        address: address
        salt: salt
        chain_id: 6
        token_id: token_id
        updated_at: updated_at
        implementation: implementation
        created_at: created_at
        token_contract: token_contract
        id: 5
        deleted_at:
          valid: true
          time: time
      properties:
        address:
          description: The address of the tba
          type: string
        chain_id:
          description: The chainId of the TBA
          type: integer
        chain_type:
          description: "no need add to unique index, because conflux core testnet\
            \ and eth mainnet has different address"
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        id:
          type: integer
        implementation:
          description: Account logic implementation
          type: string
        salt:
          description: Salt parameter that adjusts the tba address
          type: string
        token_contract:
          description: The address of the nft contract
          type: string
        token_contract_chain_id:
          description: "NOTE: this is not the chain id of contract but the erc6551\
            \ defined chainid"
          type: integer
        token_id:
          description: Token id of the nft
          type: string
        updated_at:
          type: string
      type: object
    models.TokenBoundAccountCollection:
      example:
        chain_type: 1
        chain_id: 6
        updated_at: updated_at
        name: name
        created_at: created_at
        description: description
        id: 5
        deleted_at:
          valid: true
          time: time
        items:
        - token_contract_chain_id: 5
          chain_type: 1
          address: address
          salt: salt
          chain_id: 6
          token_id: token_id
          updated_at: updated_at
          implementation: implementation
          created_at: created_at
          token_contract: token_contract
          id: 5
          deleted_at:
            valid: true
            time: time
        - token_contract_chain_id: 5
          chain_type: 1
          address: address
          salt: salt
          chain_id: 6
          token_id: token_id
          updated_at: updated_at
          implementation: implementation
          created_at: created_at
          token_contract: token_contract
          id: 5
          deleted_at:
            valid: true
            time: time
        userId: 5
      properties:
        chain_id:
          description: The chain id of the tba collection. All tbas in the collection
            are of same chain id.
          type: integer
        chain_type:
          description: "the type of the chain. 1-CFX, 2-ETH. All tbas in the collection\
            \ are of same chain type"
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        description:
          description: Collection description
          type: string
        id:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.TokenBoundAccount'
          type: array
        name:
          description: The name of tba collection. The name is unique for the user.
          type: string
        updated_at:
          type: string
        userId:
          description: The user created the collection
          type: integer
      type: object
    models.TokenBoundAccountCollectionQueryResult:
      example:
        count: 0
        items:
        - chain_type: 1
          chain_id: 6
          updated_at: updated_at
          name: name
          created_at: created_at
          description: description
          id: 5
          deleted_at:
            valid: true
            time: time
          items:
          - token_contract_chain_id: 5
            chain_type: 1
            address: address
            salt: salt
            chain_id: 6
            token_id: token_id
            updated_at: updated_at
            implementation: implementation
            created_at: created_at
            token_contract: token_contract
            id: 5
            deleted_at:
              valid: true
              time: time
          - token_contract_chain_id: 5
            chain_type: 1
            address: address
            salt: salt
            chain_id: 6
            token_id: token_id
            updated_at: updated_at
            implementation: implementation
            created_at: created_at
            token_contract: token_contract
            id: 5
            deleted_at:
              valid: true
              time: time
          userId: 5
        - chain_type: 1
          chain_id: 6
          updated_at: updated_at
          name: name
          created_at: created_at
          description: description
          id: 5
          deleted_at:
            valid: true
            time: time
          items:
          - token_contract_chain_id: 5
            chain_type: 1
            address: address
            salt: salt
            chain_id: 6
            token_id: token_id
            updated_at: updated_at
            implementation: implementation
            created_at: created_at
            token_contract: token_contract
            id: 5
            deleted_at:
              valid: true
              time: time
          - token_contract_chain_id: 5
            chain_type: 1
            address: address
            salt: salt
            chain_id: 6
            token_id: token_id
            updated_at: updated_at
            implementation: implementation
            created_at: created_at
            token_contract: token_contract
            id: 5
            deleted_at:
              valid: true
              time: time
          userId: 5
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.TokenBoundAccountCollection'
          type: array
      type: object
    models.TokenBoundAccountQueryResult:
      example:
        count: 0
        items:
        - token_contract_chain_id: 5
          chain_type: 1
          address: address
          salt: salt
          chain_id: 6
          token_id: token_id
          updated_at: updated_at
          implementation: implementation
          created_at: created_at
          token_contract: token_contract
          id: 5
          deleted_at:
            valid: true
            time: time
        - token_contract_chain_id: 5
          chain_type: 1
          address: address
          salt: salt
          chain_id: 6
          token_id: token_id
          updated_at: updated_at
          implementation: implementation
          created_at: created_at
          token_contract: token_contract
          id: 5
          deleted_at:
            valid: true
            time: time
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.TokenBoundAccount'
          type: array
      type: object
    models.Transaction:
      example:
        data: data
        storageCollateralized: 7.386281948385884
        pre_hashs: pre_hashs
        created_at: created_at
        epoch_number: 5
        gasCoveredBySponsor: true
        chainType: 6
        error: error
        epochHeight: 1.4658129805029452
        taskType: null
        updated_at: updated_at
        pending_reason: pending_reason
        gas: 5.637376656633329
        from: from
        id: 9
        state: null
        storageCoveredBySponsor: true
        value: 1.4894159098541704
        gasPrice: 7.061401241503109
        gasFee: 2.3021358869347655
        tryReceiptCnt: 1
        block_reason: "{}"
        deleted_at:
          valid: true
          time: time
        nonce: 3
        storageLimit: 1.2315135367772556
        stage: 2
        chainId: 0
        to: to
        hash: hash
        status: 4
      properties:
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chainId:
          type: integer
        chainType:
          type: integer
        created_at:
          type: string
        data:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        epochHeight:
          type: number
        epoch_number:
          type: integer
        error:
          type: string
        from:
          type: string
        gas:
          type: number
        gasCoveredBySponsor:
          type: boolean
        gasFee:
          type: number
        gasPrice:
          type: number
        hash:
          type: string
        id:
          type: integer
        nonce:
          type: integer
        pending_reason:
          type: string
        pre_hashs:
          type: string
        stage:
          type: integer
        state:
          $ref: '#/components/schemas/models.TxState'
        status:
          type: integer
        storageCollateralized:
          type: number
        storageCoveredBySponsor:
          type: boolean
        storageLimit:
          type: number
        taskType:
          $ref: '#/components/schemas/models.TaskType'
        to:
          type: string
        tryReceiptCnt:
          type: integer
        updated_at:
          type: string
        value:
          type: number
      type: object
    models.TransferTask:
      example:
        amount: 6
        chain_type: 5
        chain_id: 5
        contract: contract
        block_reason: "{}"
        created_at: created_at
        transfer_to: transfer_to
        error: error
        tx_id: 3
        deleted_at:
          valid: true
          time: time
        contract_type: 2
        transfer_from: transfer_from
        token_id: token_id
        updated_at: updated_at
        id: 7
        app_id: 1
        hash: hash
        status: 9
      properties:
        amount:
          type: integer
        app_id:
          type: integer
        block_reason:
          allOf:
          - $ref: '#/components/schemas/enums.TransactionBlockReason'
          description: 没有发送到tx engine的原因，比如余额不足或网络错误等
          type: object
        chain_id:
          type: integer
        chain_type:
          type: integer
        contract:
          type: string
        contract_type:
          type: integer
        created_at:
          type: string
        deleted_at:
          $ref: '#/components/schemas/gorm.DeletedAt'
        error:
          type: string
        hash:
          type: string
        id:
          type: integer
        status:
          description: "0-pending, 1-success, 2-failed"
          type: integer
        token_id:
          type: string
        transfer_from:
          type: string
        transfer_to:
          type: string
        tx_id:
          type: integer
        updated_at:
          type: string
      type: object
    models.TransferTaskQueryResult:
      example:
        count: 0
        items:
        - amount: 6
          chain_type: 5
          chain_id: 5
          contract: contract
          block_reason: "{}"
          created_at: created_at
          transfer_to: transfer_to
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 2
          transfer_from: transfer_from
          token_id: token_id
          updated_at: updated_at
          id: 7
          app_id: 1
          hash: hash
          status: 9
        - amount: 6
          chain_type: 5
          chain_id: 5
          contract: contract
          block_reason: "{}"
          created_at: created_at
          transfer_to: transfer_to
          error: error
          tx_id: 3
          deleted_at:
            valid: true
            time: time
          contract_type: 2
          transfer_from: transfer_from
          token_id: token_id
          updated_at: updated_at
          id: 7
          app_id: 1
          hash: hash
          status: 9
      properties:
        count:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/models.TransferTask'
          type: array
      type: object
    models.TxState:
      enum:
      - -10
      - -9
      - -8
      - -7
      - -6
      - -5
      - -4
      - -3
      - -2
      - -1
      - 0
      - 1
      - 2
      - 3
      - 4
      type: integer
      x-enum-comments:
        TX_STATE_CONFIRMED: "4"
        TX_STATE_EXECUTED: "3"
        TX_STATE_EXECUTE_FAILED: "-2"
        TX_STATE_INIT: "0"
        TX_STATE_PENDING_RETRY: "-5"
        TX_STATE_PENDING_RETRY_UPPER_GAS: "-6"
        TX_STATE_PENDING_TX_EMPTY_RETRY: "-7"
        TX_STATE_PENDING_WAIT: -10; pending because of notEnoughCash or futureNonce
        TX_STATE_POPULATED: "1"
        TX_STATE_READY_OR_INSERTED: "2"
        TX_STATE_SEND_FAILED: "-1"
        TX_STATE_SEND_FAILED_RETRY: "-3"
        TX_STATE_SEND_FAILED_RETRY_UPPER_GAS: "-4"
        _RESERVE_1: "-9"
        _RESERVE_2: "-8"
      x-enum-varnames:
      - TX_STATE_PENDING_WAIT
      - _RESERVE_1
      - _RESERVE_2
      - TX_STATE_PENDING_TX_EMPTY_RETRY
      - TX_STATE_PENDING_RETRY_UPPER_GAS
      - TX_STATE_PENDING_RETRY
      - TX_STATE_SEND_FAILED_RETRY_UPPER_GAS
      - TX_STATE_SEND_FAILED_RETRY
      - TX_STATE_EXECUTE_FAILED
      - TX_STATE_SEND_FAILED
      - TX_STATE_INIT
      - TX_STATE_POPULATED
      - TX_STATE_READY_OR_INSERTED
      - TX_STATE_EXECUTED
      - TX_STATE_CONFIRMED
    multipart.FileHeader:
      properties:
        filename:
          type: string
        header:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        size:
          type: integer
      type: object
    rainbow_errors.RainbowErrorDetailInfo:
      properties:
        code:
          type: integer
        data:
          type: string
        message:
          type: string
      type: object
    routers.UpdateTokenUriReq:
      properties:
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_type:
          enum:
          - erc721
          - erc1155
          type: string
        token_uri:
          type: string
      required:
      - chain
      - contract_type
      type: object
    services.AppBatchMintByMetaUriDto:
      properties:
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        mint_items:
          items:
            $ref: '#/components/schemas/services.MintItemDto'
          type: array
      required:
      - chain
      - contract_address
      - mint_items
      type: object
    services.AppMintByMetaPartsDto:
      properties:
        amount:
          description: "amount on same token id, only erc1155 contract could set large\
            \ than 1, others set null or 1"
          type: integer
        animation_url:
          type: string
        attributes:
          items:
            $ref: '#/components/schemas/models.ExposedMetadataAttribute'
          type: array
        chain:
          type: string
        contract_address:
          type: string
        description:
          type: string
        file_url:
          type: string
        mint_to_address:
          type: string
        name:
          type: string
        number:
          description: "mint number, everyone with different token id (not conflict\
            \ with AmountOnSameTokenID)"
          type: integer
      required:
      - chain
      - file_url
      - mint_to_address
      - name
      type: object
    services.BurnBatchDto:
      properties:
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        contract_type:
          enum:
          - erc721
          - erc1155
          type: string
        items:
          items:
            $ref: '#/components/schemas/services.BurnItemDto'
          type: array
        user:
          type: string
      required:
      - chain
      - contract_address
      - contract_type
      - items
      type: object
    services.BurnDto:
      properties:
        amount:
          type: integer
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        contract_type:
          enum:
          - erc721
          - erc1155
          type: string
        token_id:
          type: string
        user:
          type: string
      required:
      - chain
      - contract_address
      - contract_type
      - token_id
      type: object
    services.BurnItemDto:
      properties:
        amount:
          type: integer
        token_id:
          type: string
      required:
      - token_id
      type: object
    services.ContractAdminUpdateDto:
      properties:
        admin_address:
          description: |-
            Chain           string `form:"chain" json:"chain" binding:"required,oneof=conflux conflux_test"`
            ContractAddress string `form:"contract_address" json:"contract_address" binding:"required"`
          type: string
      required:
      - admin_address
      type: object
    services.ContractAutoSponsorReq:
      properties:
        auto_sponsor:
          description: Address                  string `gorm:"type:varchar(256);index"
            json:"address"`
          type: boolean
        storage_recharge_amount:
          type: integer
        storage_recharge_threshold:
          type: integer
      type: object
    services.ContractDeployDto:
      properties:
        auto_sponsor:
          description: "default: true"
          type: boolean
        base_uri:
          type: string
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        is_sponsor_for_all_user:
          description: "default: true"
          type: boolean
        name:
          type: string
        owner_address:
          type: string
        royalties_address:
          type: string
        royalties_bps:
          type: integer
        symbol:
          type: string
        tokens_transferable_by_admin:
          description: "default: true"
          type: boolean
        tokens_transferable_by_user:
          description: "default: true"
          type: boolean
        transfer_cooldown_time:
          description: "default: 0"
          type: integer
        type:
          enum:
          - erc721
          - erc1155
          type: string
      required:
      - chain
      - name
      - symbol
      - type
      type: object
    services.CustomMintBatchDto:
      properties:
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        mint_items:
          items:
            $ref: '#/components/schemas/services.MintItemDto'
          type: array
      required:
      - chain
      - contract_address
      - mint_items
      type: object
    services.CustomMintDto:
      properties:
        amount:
          type: integer
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        metadata_uri:
          type: string
        mint_to_address:
          type: string
        token_id:
          type: string
      required:
      - chain
      - contract_address
      - mint_to_address
      type: object
    services.EasyMintMetaPartsDto:
      properties:
        animation_url:
          type: string
        attributes:
          items:
            $ref: '#/components/schemas/models.ExposedMetadataAttribute'
          type: array
        chain:
          type: string
        description:
          type: string
        file_url:
          type: string
        mint_to_address:
          type: string
        name:
          type: string
      required:
      - chain
      - file_url
      - mint_to_address
      - name
      type: object
    services.InsertAccountReq:
      properties:
        create_if_exists:
          type: boolean
        phone:
          type: string
      type: object
    services.MetadataDto:
      properties:
        animation_url:
          type: string
        attributes:
          items:
            $ref: '#/components/schemas/models.ExposedMetadataAttribute'
          type: array
        description:
          type: string
        external_link:
          type: string
        image:
          type: string
        name:
          type: string
      required:
      - description
      - image
      - name
      type: object
    services.MintItemDto:
      properties:
        amount:
          type: integer
        metadata_uri:
          type: string
        mint_to_address:
          type: string
        token_id:
          type: string
      required:
      - mint_to_address
      type: object
    services.NFT:
      example:
        owner: owner
        token_uri: token_uri
        token_id: token_id
        contract_address: contract_address
      properties:
        contract_address:
          type: string
        owner:
          type: string
        token_id:
          type: string
        token_uri:
          type: string
      type: object
    services.SendTxResp:
      example:
        tx_id: 0
      properties:
        tx_id:
          type: integer
      type: object
    services.SetSponsorResp:
      example:
        sponsor_gas_tx_id: 6
        sponsor_collateral_tx_id: 0
      properties:
        sponsor_collateral_tx_id:
          type: integer
        sponsor_gas_tx_id:
          type: integer
      type: object
    services.SponsorInfo:
      example:
        gas_sponsor: gas_sponsor
        collateral_sponsor_balance: collateral_sponsor_balance
        gas_sponsor_balance: gas_sponsor_balance
        gas_upper_bound: gas_upper_bound
        collateral_sponsor: collateral_sponsor
        is_all_white_listed: true
      properties:
        collateral_sponsor:
          type: string
        collateral_sponsor_balance:
          type: string
        gas_sponsor:
          type: string
        gas_sponsor_balance:
          type: string
        gas_upper_bound:
          type: string
        is_all_white_listed:
          type: boolean
      type: object
    services.TransferBatchDto:
      properties:
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        contract_type:
          enum:
          - erc721
          - erc1155
          type: string
        items:
          items:
            $ref: '#/components/schemas/services.TransferItemDto'
          type: array
      required:
      - chain
      - contract_address
      - contract_type
      - items
      type: object
    services.TransferDto:
      properties:
        amount:
          type: integer
        chain:
          enum:
          - conflux
          - conflux_test
          type: string
        contract_address:
          type: string
        contract_type:
          enum:
          - erc721
          - erc1155
          type: string
        token_id:
          type: string
        transfer_from_address:
          type: string
        transfer_to_address:
          type: string
      required:
      - chain
      - contract_address
      - contract_type
      - token_id
      - transfer_from_address
      - transfer_to_address
      type: object
    services.TransferItemDto:
      properties:
        amount:
          type: integer
        token_id:
          type: string
        transfer_from_address:
          type: string
        transfer_to_address:
          type: string
      required:
      - token_id
      - transfer_from_address
      - transfer_to_address
      type: object
    services.TxResp:
      example:
        is_finalized: true
        error_msg: error_msg
        state_msg: state_msg
        is_success: true
        state_code: null
        hash: hash
      properties:
        error_msg:
          type: string
        hash:
          type: string
        is_finalized:
          type: boolean
        is_success:
          type: boolean
        state_code:
          $ref: '#/components/schemas/models.TxState'
        state_msg:
          type: string
      type: object
    services.UploadFilesResponse:
      example:
        file_url: file_url
        file_name: file_name
        file_type: file_type
        file_size: 0
      properties:
        file_name:
          type: string
        file_size:
          type: integer
        file_type:
          type: string
        file_url:
          type: string
      type: object
    services.UploadFolderResponse:
      example:
        folder_url: folder_url
        file_num: 0
      properties:
        file_num:
          type: integer
        folder_url:
          type: string
      type: object
    textproto.MIMEHeader:
      additionalProperties:
        items:
          type: string
        type: array
      type: object
    UploadFile_request:
      properties:
        file:
          description: uploaded file
          format: binary
          type: string
      required:
      - file
      type: object
    UploadFolder_request:
      properties:
        folder:
          description: uploaded folder
          format: binary
          type: string
      required:
      - folder
      type: object
    EasyMintByFile_request:
      properties:
        chain:
          type: string
        description:
          type: string
        mint_to_address:
          type: string
        name:
          type: string
        file:
          description: file
          format: binary
          type: string
      required:
      - chain
      - description
      - file
      - mint_to_address
      - name
      type: object
x-original-swagger-version: "2.0"
