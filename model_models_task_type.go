/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// ModelsTaskType the model 'ModelsTaskType'
type ModelsTaskType int32

// List of models.TaskType
const (
	MODELSTASKTYPE_TASK_TYPE_DEPLOY ModelsTaskType = 1
	MODELSTASKTYPE_TASK_TYPE_MINT ModelsTaskType = 2
	MODELSTASKTYPE_TASK_TYPE_MINT_BATCH ModelsTaskType = 3
	MODELSTASKTYPE_TASK_TYPE_TRANSFER ModelsTaskType = 4
	MODELSTASKTYPE_TASK_TYPE_TRANSFER_BATCH ModelsTaskType = 5
	MODELSTASKTYPE_TASK_TYPE_BURN ModelsTaskType = 6
	MODELSTASKTYPE_TASK_TYPE_BURN_BATCH ModelsTaskType = 7
	MODELSTASKTYPE_TASK_TYPE_UPDATE_ADMIN ModelsTaskType = 8
	MODELSTASKTYPE_TASK_TYPE_SPONSOR_BALANCE ModelsTaskType = 9
	MODELSTASKTYPE_TASK_TYPE_SPONSOR_PRIVILEGE ModelsTaskType = 10
	MODELSTASKTYPE_TASK_TYPE_UPDATE_TOKEN_URI ModelsTaskType = 11
	MODELSTASKTYPE_TASK_TYPE_CREATE_TBA ModelsTaskType = 12
	MODELSTASKTYPE_TASK_TYPE_CUSTODY_SEND_TX ModelsTaskType = 13
)

// All allowed values of ModelsTaskType enum
var AllowedModelsTaskTypeEnumValues = []ModelsTaskType{
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
}

func (v *ModelsTaskType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsTaskType(value)
	for _, existing := range AllowedModelsTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsTaskType", value)
}

// NewModelsTaskTypeFromValue returns a pointer to a valid ModelsTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsTaskTypeFromValue(v int32) (*ModelsTaskType, error) {
	ev := ModelsTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsTaskType: valid values are %v", v, AllowedModelsTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsTaskType) IsValid() bool {
	for _, existing := range AllowedModelsTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.TaskType value
func (v ModelsTaskType) Ptr() *ModelsTaskType {
	return &v
}

type NullableModelsTaskType struct {
	value *ModelsTaskType
	isSet bool
}

func (v NullableModelsTaskType) Get() *ModelsTaskType {
	return v.value
}

func (v *NullableModelsTaskType) Set(val *ModelsTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTaskType(val *ModelsTaskType) *NullableModelsTaskType {
	return &NullableModelsTaskType{value: val, isSet: true}
}

func (v NullableModelsTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

