/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ModelsTBACollectionCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTBACollectionCreateDto{}

// ModelsTBACollectionCreateDto struct for ModelsTBACollectionCreateDto
type ModelsTBACollectionCreateDto struct {
	// The chain type. The types include `conflux`` and `conflux_test``
	Chain string `json:"chain"`
	// The collection description
	Description *string `json:"description,omitempty"`
	// The name of the collection. Should be unique for the user.
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ModelsTBACollectionCreateDto ModelsTBACollectionCreateDto

// NewModelsTBACollectionCreateDto instantiates a new ModelsTBACollectionCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTBACollectionCreateDto(chain string, name string) *ModelsTBACollectionCreateDto {
	this := ModelsTBACollectionCreateDto{}
	this.Chain = chain
	this.Name = name
	return &this
}

// NewModelsTBACollectionCreateDtoWithDefaults instantiates a new ModelsTBACollectionCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTBACollectionCreateDtoWithDefaults() *ModelsTBACollectionCreateDto {
	this := ModelsTBACollectionCreateDto{}
	return &this
}

// GetChain returns the Chain field value
func (o *ModelsTBACollectionCreateDto) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *ModelsTBACollectionCreateDto) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *ModelsTBACollectionCreateDto) SetChain(v string) {
	o.Chain = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsTBACollectionCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTBACollectionCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsTBACollectionCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsTBACollectionCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *ModelsTBACollectionCreateDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelsTBACollectionCreateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelsTBACollectionCreateDto) SetName(v string) {
	o.Name = v
}

func (o ModelsTBACollectionCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTBACollectionCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsTBACollectionCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelsTBACollectionCreateDto := _ModelsTBACollectionCreateDto{}

	err = json.Unmarshal(data, &varModelsTBACollectionCreateDto)

	if err != nil {
		return err
	}

	*o = ModelsTBACollectionCreateDto(varModelsTBACollectionCreateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsTBACollectionCreateDto struct {
	value *ModelsTBACollectionCreateDto
	isSet bool
}

func (v NullableModelsTBACollectionCreateDto) Get() *ModelsTBACollectionCreateDto {
	return v.value
}

func (v *NullableModelsTBACollectionCreateDto) Set(val *ModelsTBACollectionCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTBACollectionCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTBACollectionCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTBACollectionCreateDto(val *ModelsTBACollectionCreateDto) *NullableModelsTBACollectionCreateDto {
	return &NullableModelsTBACollectionCreateDto{value: val, isSet: true}
}

func (v NullableModelsTBACollectionCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTBACollectionCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


