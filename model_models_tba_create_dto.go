/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ModelsTBACreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTBACreateDto{}

// ModelsTBACreateDto struct for ModelsTBACreateDto
type ModelsTBACreateDto struct {
	// The chain type. The types include `conflux`` and `conflux_test``
	Chain string `json:"chain"`
	// the collection to add after the tba is created. Will create the collection if it is not created yet.
	CollectionToAdd *string `json:"collection_to_add,omitempty"`
	// salt parameter to adjust tba address
	Salt *string `json:"salt,omitempty"`
	// address of the nft contract
	TokenContract string `json:"token_contract"`
	// token id of nft
	TokenId string `json:"token_id"`
	AdditionalProperties map[string]interface{}
}

type _ModelsTBACreateDto ModelsTBACreateDto

// NewModelsTBACreateDto instantiates a new ModelsTBACreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTBACreateDto(chain string, tokenContract string, tokenId string) *ModelsTBACreateDto {
	this := ModelsTBACreateDto{}
	this.Chain = chain
	this.TokenContract = tokenContract
	this.TokenId = tokenId
	return &this
}

// NewModelsTBACreateDtoWithDefaults instantiates a new ModelsTBACreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTBACreateDtoWithDefaults() *ModelsTBACreateDto {
	this := ModelsTBACreateDto{}
	return &this
}

// GetChain returns the Chain field value
func (o *ModelsTBACreateDto) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *ModelsTBACreateDto) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *ModelsTBACreateDto) SetChain(v string) {
	o.Chain = v
}

// GetCollectionToAdd returns the CollectionToAdd field value if set, zero value otherwise.
func (o *ModelsTBACreateDto) GetCollectionToAdd() string {
	if o == nil || IsNil(o.CollectionToAdd) {
		var ret string
		return ret
	}
	return *o.CollectionToAdd
}

// GetCollectionToAddOk returns a tuple with the CollectionToAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTBACreateDto) GetCollectionToAddOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionToAdd) {
		return nil, false
	}
	return o.CollectionToAdd, true
}

// HasCollectionToAdd returns a boolean if a field has been set.
func (o *ModelsTBACreateDto) HasCollectionToAdd() bool {
	if o != nil && !IsNil(o.CollectionToAdd) {
		return true
	}

	return false
}

// SetCollectionToAdd gets a reference to the given string and assigns it to the CollectionToAdd field.
func (o *ModelsTBACreateDto) SetCollectionToAdd(v string) {
	o.CollectionToAdd = &v
}

// GetSalt returns the Salt field value if set, zero value otherwise.
func (o *ModelsTBACreateDto) GetSalt() string {
	if o == nil || IsNil(o.Salt) {
		var ret string
		return ret
	}
	return *o.Salt
}

// GetSaltOk returns a tuple with the Salt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTBACreateDto) GetSaltOk() (*string, bool) {
	if o == nil || IsNil(o.Salt) {
		return nil, false
	}
	return o.Salt, true
}

// HasSalt returns a boolean if a field has been set.
func (o *ModelsTBACreateDto) HasSalt() bool {
	if o != nil && !IsNil(o.Salt) {
		return true
	}

	return false
}

// SetSalt gets a reference to the given string and assigns it to the Salt field.
func (o *ModelsTBACreateDto) SetSalt(v string) {
	o.Salt = &v
}

// GetTokenContract returns the TokenContract field value
func (o *ModelsTBACreateDto) GetTokenContract() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenContract
}

// GetTokenContractOk returns a tuple with the TokenContract field value
// and a boolean to check if the value has been set.
func (o *ModelsTBACreateDto) GetTokenContractOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenContract, true
}

// SetTokenContract sets field value
func (o *ModelsTBACreateDto) SetTokenContract(v string) {
	o.TokenContract = v
}

// GetTokenId returns the TokenId field value
func (o *ModelsTBACreateDto) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *ModelsTBACreateDto) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *ModelsTBACreateDto) SetTokenId(v string) {
	o.TokenId = v
}

func (o ModelsTBACreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTBACreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	if !IsNil(o.CollectionToAdd) {
		toSerialize["collection_to_add"] = o.CollectionToAdd
	}
	if !IsNil(o.Salt) {
		toSerialize["salt"] = o.Salt
	}
	toSerialize["token_contract"] = o.TokenContract
	toSerialize["token_id"] = o.TokenId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsTBACreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"token_contract",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelsTBACreateDto := _ModelsTBACreateDto{}

	err = json.Unmarshal(data, &varModelsTBACreateDto)

	if err != nil {
		return err
	}

	*o = ModelsTBACreateDto(varModelsTBACreateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "collection_to_add")
		delete(additionalProperties, "salt")
		delete(additionalProperties, "token_contract")
		delete(additionalProperties, "token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsTBACreateDto struct {
	value *ModelsTBACreateDto
	isSet bool
}

func (v NullableModelsTBACreateDto) Get() *ModelsTBACreateDto {
	return v.value
}

func (v *NullableModelsTBACreateDto) Set(val *ModelsTBACreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTBACreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTBACreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTBACreateDto(val *ModelsTBACreateDto) *NullableModelsTBACreateDto {
	return &NullableModelsTBACreateDto{value: val, isSet: true}
}

func (v NullableModelsTBACreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTBACreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


