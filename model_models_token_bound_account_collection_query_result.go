/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// checks if the ModelsTokenBoundAccountCollectionQueryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTokenBoundAccountCollectionQueryResult{}

// ModelsTokenBoundAccountCollectionQueryResult struct for ModelsTokenBoundAccountCollectionQueryResult
type ModelsTokenBoundAccountCollectionQueryResult struct {
	Count *int32 `json:"count,omitempty"`
	Items []ModelsTokenBoundAccountCollection `json:"items,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsTokenBoundAccountCollectionQueryResult ModelsTokenBoundAccountCollectionQueryResult

// NewModelsTokenBoundAccountCollectionQueryResult instantiates a new ModelsTokenBoundAccountCollectionQueryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTokenBoundAccountCollectionQueryResult() *ModelsTokenBoundAccountCollectionQueryResult {
	this := ModelsTokenBoundAccountCollectionQueryResult{}
	return &this
}

// NewModelsTokenBoundAccountCollectionQueryResultWithDefaults instantiates a new ModelsTokenBoundAccountCollectionQueryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTokenBoundAccountCollectionQueryResultWithDefaults() *ModelsTokenBoundAccountCollectionQueryResult {
	this := ModelsTokenBoundAccountCollectionQueryResult{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ModelsTokenBoundAccountCollectionQueryResult) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTokenBoundAccountCollectionQueryResult) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ModelsTokenBoundAccountCollectionQueryResult) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ModelsTokenBoundAccountCollectionQueryResult) SetCount(v int32) {
	o.Count = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ModelsTokenBoundAccountCollectionQueryResult) GetItems() []ModelsTokenBoundAccountCollection {
	if o == nil || IsNil(o.Items) {
		var ret []ModelsTokenBoundAccountCollection
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTokenBoundAccountCollectionQueryResult) GetItemsOk() ([]ModelsTokenBoundAccountCollection, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ModelsTokenBoundAccountCollectionQueryResult) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ModelsTokenBoundAccountCollection and assigns it to the Items field.
func (o *ModelsTokenBoundAccountCollectionQueryResult) SetItems(v []ModelsTokenBoundAccountCollection) {
	o.Items = v
}

func (o ModelsTokenBoundAccountCollectionQueryResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTokenBoundAccountCollectionQueryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsTokenBoundAccountCollectionQueryResult) UnmarshalJSON(data []byte) (err error) {
	varModelsTokenBoundAccountCollectionQueryResult := _ModelsTokenBoundAccountCollectionQueryResult{}

	err = json.Unmarshal(data, &varModelsTokenBoundAccountCollectionQueryResult)

	if err != nil {
		return err
	}

	*o = ModelsTokenBoundAccountCollectionQueryResult(varModelsTokenBoundAccountCollectionQueryResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsTokenBoundAccountCollectionQueryResult struct {
	value *ModelsTokenBoundAccountCollectionQueryResult
	isSet bool
}

func (v NullableModelsTokenBoundAccountCollectionQueryResult) Get() *ModelsTokenBoundAccountCollectionQueryResult {
	return v.value
}

func (v *NullableModelsTokenBoundAccountCollectionQueryResult) Set(val *ModelsTokenBoundAccountCollectionQueryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTokenBoundAccountCollectionQueryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTokenBoundAccountCollectionQueryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTokenBoundAccountCollectionQueryResult(val *ModelsTokenBoundAccountCollectionQueryResult) *NullableModelsTokenBoundAccountCollectionQueryResult {
	return &NullableModelsTokenBoundAccountCollectionQueryResult{value: val, isSet: true}
}

func (v NullableModelsTokenBoundAccountCollectionQueryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTokenBoundAccountCollectionQueryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


