/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// ModelsTransaction struct for ModelsTransaction
type ModelsTransaction struct {
	ChainId *int32 `json:"chainId,omitempty"`
	ChainType *int32 `json:"chainType,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Data *string `json:"data,omitempty"`
	DeletedAt *GormDeletedAt `json:"deleted_at,omitempty"`
	EpochHeight *float32 `json:"epochHeight,omitempty"`
	EpochNumber *int32 `json:"epoch_number,omitempty"`
	Error *string `json:"error,omitempty"`
	From *string `json:"from,omitempty"`
	Gas *float32 `json:"gas,omitempty"`
	GasCoveredBySponsor *bool `json:"gasCoveredBySponsor,omitempty"`
	GasFee *float32 `json:"gasFee,omitempty"`
	GasPrice *float32 `json:"gasPrice,omitempty"`
	Hash *string `json:"hash,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Nonce *int32 `json:"nonce,omitempty"`
	PendingReason *string `json:"pending_reason,omitempty"`
	PreHashs *string `json:"pre_hashs,omitempty"`
	Stage *int32 `json:"stage,omitempty"`
	State *int32 `json:"state,omitempty"`
	Status *int32 `json:"status,omitempty"`
	StorageCollateralized *float32 `json:"storageCollateralized,omitempty"`
	StorageCoveredBySponsor *bool `json:"storageCoveredBySponsor,omitempty"`
	StorageLimit *float32 `json:"storageLimit,omitempty"`
	TaskType *int32 `json:"taskType,omitempty"`
	To *string `json:"to,omitempty"`
	TryReceiptCnt *int32 `json:"tryReceiptCnt,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Value *float32 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsTransaction ModelsTransaction

// NewModelsTransaction instantiates a new ModelsTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTransaction() *ModelsTransaction {
	this := ModelsTransaction{}
	return &this
}

// NewModelsTransactionWithDefaults instantiates a new ModelsTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTransactionWithDefaults() *ModelsTransaction {
	this := ModelsTransaction{}
	return &this
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *ModelsTransaction) GetChainId() int32 {
	if o == nil || isNil(o.ChainId) {
		var ret int32
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetChainIdOk() (*int32, bool) {
	if o == nil || isNil(o.ChainId) {
    return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *ModelsTransaction) HasChainId() bool {
	if o != nil && !isNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given int32 and assigns it to the ChainId field.
func (o *ModelsTransaction) SetChainId(v int32) {
	o.ChainId = &v
}

// GetChainType returns the ChainType field value if set, zero value otherwise.
func (o *ModelsTransaction) GetChainType() int32 {
	if o == nil || isNil(o.ChainType) {
		var ret int32
		return ret
	}
	return *o.ChainType
}

// GetChainTypeOk returns a tuple with the ChainType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetChainTypeOk() (*int32, bool) {
	if o == nil || isNil(o.ChainType) {
    return nil, false
	}
	return o.ChainType, true
}

// HasChainType returns a boolean if a field has been set.
func (o *ModelsTransaction) HasChainType() bool {
	if o != nil && !isNil(o.ChainType) {
		return true
	}

	return false
}

// SetChainType gets a reference to the given int32 and assigns it to the ChainType field.
func (o *ModelsTransaction) SetChainType(v int32) {
	o.ChainType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ModelsTransaction) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ModelsTransaction) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ModelsTransaction) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ModelsTransaction) GetData() string {
	if o == nil || isNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetDataOk() (*string, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ModelsTransaction) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ModelsTransaction) SetData(v string) {
	o.Data = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ModelsTransaction) GetDeletedAt() GormDeletedAt {
	if o == nil || isNil(o.DeletedAt) {
		var ret GormDeletedAt
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetDeletedAtOk() (*GormDeletedAt, bool) {
	if o == nil || isNil(o.DeletedAt) {
    return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ModelsTransaction) HasDeletedAt() bool {
	if o != nil && !isNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given GormDeletedAt and assigns it to the DeletedAt field.
func (o *ModelsTransaction) SetDeletedAt(v GormDeletedAt) {
	o.DeletedAt = &v
}

// GetEpochHeight returns the EpochHeight field value if set, zero value otherwise.
func (o *ModelsTransaction) GetEpochHeight() float32 {
	if o == nil || isNil(o.EpochHeight) {
		var ret float32
		return ret
	}
	return *o.EpochHeight
}

// GetEpochHeightOk returns a tuple with the EpochHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetEpochHeightOk() (*float32, bool) {
	if o == nil || isNil(o.EpochHeight) {
    return nil, false
	}
	return o.EpochHeight, true
}

// HasEpochHeight returns a boolean if a field has been set.
func (o *ModelsTransaction) HasEpochHeight() bool {
	if o != nil && !isNil(o.EpochHeight) {
		return true
	}

	return false
}

// SetEpochHeight gets a reference to the given float32 and assigns it to the EpochHeight field.
func (o *ModelsTransaction) SetEpochHeight(v float32) {
	o.EpochHeight = &v
}

// GetEpochNumber returns the EpochNumber field value if set, zero value otherwise.
func (o *ModelsTransaction) GetEpochNumber() int32 {
	if o == nil || isNil(o.EpochNumber) {
		var ret int32
		return ret
	}
	return *o.EpochNumber
}

// GetEpochNumberOk returns a tuple with the EpochNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetEpochNumberOk() (*int32, bool) {
	if o == nil || isNil(o.EpochNumber) {
    return nil, false
	}
	return o.EpochNumber, true
}

// HasEpochNumber returns a boolean if a field has been set.
func (o *ModelsTransaction) HasEpochNumber() bool {
	if o != nil && !isNil(o.EpochNumber) {
		return true
	}

	return false
}

// SetEpochNumber gets a reference to the given int32 and assigns it to the EpochNumber field.
func (o *ModelsTransaction) SetEpochNumber(v int32) {
	o.EpochNumber = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ModelsTransaction) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ModelsTransaction) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ModelsTransaction) SetError(v string) {
	o.Error = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ModelsTransaction) GetFrom() string {
	if o == nil || isNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetFromOk() (*string, bool) {
	if o == nil || isNil(o.From) {
    return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ModelsTransaction) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ModelsTransaction) SetFrom(v string) {
	o.From = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *ModelsTransaction) GetGas() float32 {
	if o == nil || isNil(o.Gas) {
		var ret float32
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetGasOk() (*float32, bool) {
	if o == nil || isNil(o.Gas) {
    return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *ModelsTransaction) HasGas() bool {
	if o != nil && !isNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given float32 and assigns it to the Gas field.
func (o *ModelsTransaction) SetGas(v float32) {
	o.Gas = &v
}

// GetGasCoveredBySponsor returns the GasCoveredBySponsor field value if set, zero value otherwise.
func (o *ModelsTransaction) GetGasCoveredBySponsor() bool {
	if o == nil || isNil(o.GasCoveredBySponsor) {
		var ret bool
		return ret
	}
	return *o.GasCoveredBySponsor
}

// GetGasCoveredBySponsorOk returns a tuple with the GasCoveredBySponsor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetGasCoveredBySponsorOk() (*bool, bool) {
	if o == nil || isNil(o.GasCoveredBySponsor) {
    return nil, false
	}
	return o.GasCoveredBySponsor, true
}

// HasGasCoveredBySponsor returns a boolean if a field has been set.
func (o *ModelsTransaction) HasGasCoveredBySponsor() bool {
	if o != nil && !isNil(o.GasCoveredBySponsor) {
		return true
	}

	return false
}

// SetGasCoveredBySponsor gets a reference to the given bool and assigns it to the GasCoveredBySponsor field.
func (o *ModelsTransaction) SetGasCoveredBySponsor(v bool) {
	o.GasCoveredBySponsor = &v
}

// GetGasFee returns the GasFee field value if set, zero value otherwise.
func (o *ModelsTransaction) GetGasFee() float32 {
	if o == nil || isNil(o.GasFee) {
		var ret float32
		return ret
	}
	return *o.GasFee
}

// GetGasFeeOk returns a tuple with the GasFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetGasFeeOk() (*float32, bool) {
	if o == nil || isNil(o.GasFee) {
    return nil, false
	}
	return o.GasFee, true
}

// HasGasFee returns a boolean if a field has been set.
func (o *ModelsTransaction) HasGasFee() bool {
	if o != nil && !isNil(o.GasFee) {
		return true
	}

	return false
}

// SetGasFee gets a reference to the given float32 and assigns it to the GasFee field.
func (o *ModelsTransaction) SetGasFee(v float32) {
	o.GasFee = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *ModelsTransaction) GetGasPrice() float32 {
	if o == nil || isNil(o.GasPrice) {
		var ret float32
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetGasPriceOk() (*float32, bool) {
	if o == nil || isNil(o.GasPrice) {
    return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *ModelsTransaction) HasGasPrice() bool {
	if o != nil && !isNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given float32 and assigns it to the GasPrice field.
func (o *ModelsTransaction) SetGasPrice(v float32) {
	o.GasPrice = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ModelsTransaction) GetHash() string {
	if o == nil || isNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetHashOk() (*string, bool) {
	if o == nil || isNil(o.Hash) {
    return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ModelsTransaction) HasHash() bool {
	if o != nil && !isNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ModelsTransaction) SetHash(v string) {
	o.Hash = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsTransaction) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsTransaction) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsTransaction) SetId(v int32) {
	o.Id = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *ModelsTransaction) GetNonce() int32 {
	if o == nil || isNil(o.Nonce) {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetNonceOk() (*int32, bool) {
	if o == nil || isNil(o.Nonce) {
    return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *ModelsTransaction) HasNonce() bool {
	if o != nil && !isNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *ModelsTransaction) SetNonce(v int32) {
	o.Nonce = &v
}

// GetPendingReason returns the PendingReason field value if set, zero value otherwise.
func (o *ModelsTransaction) GetPendingReason() string {
	if o == nil || isNil(o.PendingReason) {
		var ret string
		return ret
	}
	return *o.PendingReason
}

// GetPendingReasonOk returns a tuple with the PendingReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetPendingReasonOk() (*string, bool) {
	if o == nil || isNil(o.PendingReason) {
    return nil, false
	}
	return o.PendingReason, true
}

// HasPendingReason returns a boolean if a field has been set.
func (o *ModelsTransaction) HasPendingReason() bool {
	if o != nil && !isNil(o.PendingReason) {
		return true
	}

	return false
}

// SetPendingReason gets a reference to the given string and assigns it to the PendingReason field.
func (o *ModelsTransaction) SetPendingReason(v string) {
	o.PendingReason = &v
}

// GetPreHashs returns the PreHashs field value if set, zero value otherwise.
func (o *ModelsTransaction) GetPreHashs() string {
	if o == nil || isNil(o.PreHashs) {
		var ret string
		return ret
	}
	return *o.PreHashs
}

// GetPreHashsOk returns a tuple with the PreHashs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetPreHashsOk() (*string, bool) {
	if o == nil || isNil(o.PreHashs) {
    return nil, false
	}
	return o.PreHashs, true
}

// HasPreHashs returns a boolean if a field has been set.
func (o *ModelsTransaction) HasPreHashs() bool {
	if o != nil && !isNil(o.PreHashs) {
		return true
	}

	return false
}

// SetPreHashs gets a reference to the given string and assigns it to the PreHashs field.
func (o *ModelsTransaction) SetPreHashs(v string) {
	o.PreHashs = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *ModelsTransaction) GetStage() int32 {
	if o == nil || isNil(o.Stage) {
		var ret int32
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStageOk() (*int32, bool) {
	if o == nil || isNil(o.Stage) {
    return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *ModelsTransaction) HasStage() bool {
	if o != nil && !isNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given int32 and assigns it to the Stage field.
func (o *ModelsTransaction) SetStage(v int32) {
	o.Stage = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ModelsTransaction) GetState() int32 {
	if o == nil || isNil(o.State) {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStateOk() (*int32, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ModelsTransaction) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *ModelsTransaction) SetState(v int32) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelsTransaction) GetStatus() int32 {
	if o == nil || isNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStatusOk() (*int32, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelsTransaction) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ModelsTransaction) SetStatus(v int32) {
	o.Status = &v
}

// GetStorageCollateralized returns the StorageCollateralized field value if set, zero value otherwise.
func (o *ModelsTransaction) GetStorageCollateralized() float32 {
	if o == nil || isNil(o.StorageCollateralized) {
		var ret float32
		return ret
	}
	return *o.StorageCollateralized
}

// GetStorageCollateralizedOk returns a tuple with the StorageCollateralized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStorageCollateralizedOk() (*float32, bool) {
	if o == nil || isNil(o.StorageCollateralized) {
    return nil, false
	}
	return o.StorageCollateralized, true
}

// HasStorageCollateralized returns a boolean if a field has been set.
func (o *ModelsTransaction) HasStorageCollateralized() bool {
	if o != nil && !isNil(o.StorageCollateralized) {
		return true
	}

	return false
}

// SetStorageCollateralized gets a reference to the given float32 and assigns it to the StorageCollateralized field.
func (o *ModelsTransaction) SetStorageCollateralized(v float32) {
	o.StorageCollateralized = &v
}

// GetStorageCoveredBySponsor returns the StorageCoveredBySponsor field value if set, zero value otherwise.
func (o *ModelsTransaction) GetStorageCoveredBySponsor() bool {
	if o == nil || isNil(o.StorageCoveredBySponsor) {
		var ret bool
		return ret
	}
	return *o.StorageCoveredBySponsor
}

// GetStorageCoveredBySponsorOk returns a tuple with the StorageCoveredBySponsor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStorageCoveredBySponsorOk() (*bool, bool) {
	if o == nil || isNil(o.StorageCoveredBySponsor) {
    return nil, false
	}
	return o.StorageCoveredBySponsor, true
}

// HasStorageCoveredBySponsor returns a boolean if a field has been set.
func (o *ModelsTransaction) HasStorageCoveredBySponsor() bool {
	if o != nil && !isNil(o.StorageCoveredBySponsor) {
		return true
	}

	return false
}

// SetStorageCoveredBySponsor gets a reference to the given bool and assigns it to the StorageCoveredBySponsor field.
func (o *ModelsTransaction) SetStorageCoveredBySponsor(v bool) {
	o.StorageCoveredBySponsor = &v
}

// GetStorageLimit returns the StorageLimit field value if set, zero value otherwise.
func (o *ModelsTransaction) GetStorageLimit() float32 {
	if o == nil || isNil(o.StorageLimit) {
		var ret float32
		return ret
	}
	return *o.StorageLimit
}

// GetStorageLimitOk returns a tuple with the StorageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetStorageLimitOk() (*float32, bool) {
	if o == nil || isNil(o.StorageLimit) {
    return nil, false
	}
	return o.StorageLimit, true
}

// HasStorageLimit returns a boolean if a field has been set.
func (o *ModelsTransaction) HasStorageLimit() bool {
	if o != nil && !isNil(o.StorageLimit) {
		return true
	}

	return false
}

// SetStorageLimit gets a reference to the given float32 and assigns it to the StorageLimit field.
func (o *ModelsTransaction) SetStorageLimit(v float32) {
	o.StorageLimit = &v
}

// GetTaskType returns the TaskType field value if set, zero value otherwise.
func (o *ModelsTransaction) GetTaskType() int32 {
	if o == nil || isNil(o.TaskType) {
		var ret int32
		return ret
	}
	return *o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetTaskTypeOk() (*int32, bool) {
	if o == nil || isNil(o.TaskType) {
    return nil, false
	}
	return o.TaskType, true
}

// HasTaskType returns a boolean if a field has been set.
func (o *ModelsTransaction) HasTaskType() bool {
	if o != nil && !isNil(o.TaskType) {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given int32 and assigns it to the TaskType field.
func (o *ModelsTransaction) SetTaskType(v int32) {
	o.TaskType = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ModelsTransaction) GetTo() string {
	if o == nil || isNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetToOk() (*string, bool) {
	if o == nil || isNil(o.To) {
    return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ModelsTransaction) HasTo() bool {
	if o != nil && !isNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ModelsTransaction) SetTo(v string) {
	o.To = &v
}

// GetTryReceiptCnt returns the TryReceiptCnt field value if set, zero value otherwise.
func (o *ModelsTransaction) GetTryReceiptCnt() int32 {
	if o == nil || isNil(o.TryReceiptCnt) {
		var ret int32
		return ret
	}
	return *o.TryReceiptCnt
}

// GetTryReceiptCntOk returns a tuple with the TryReceiptCnt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetTryReceiptCntOk() (*int32, bool) {
	if o == nil || isNil(o.TryReceiptCnt) {
    return nil, false
	}
	return o.TryReceiptCnt, true
}

// HasTryReceiptCnt returns a boolean if a field has been set.
func (o *ModelsTransaction) HasTryReceiptCnt() bool {
	if o != nil && !isNil(o.TryReceiptCnt) {
		return true
	}

	return false
}

// SetTryReceiptCnt gets a reference to the given int32 and assigns it to the TryReceiptCnt field.
func (o *ModelsTransaction) SetTryReceiptCnt(v int32) {
	o.TryReceiptCnt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ModelsTransaction) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ModelsTransaction) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *ModelsTransaction) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelsTransaction) GetValue() float32 {
	if o == nil || isNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransaction) GetValueOk() (*float32, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsTransaction) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *ModelsTransaction) SetValue(v float32) {
	o.Value = &v
}

func (o ModelsTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChainId) {
		toSerialize["chainId"] = o.ChainId
	}
	if !isNil(o.ChainType) {
		toSerialize["chainType"] = o.ChainType
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !isNil(o.EpochHeight) {
		toSerialize["epochHeight"] = o.EpochHeight
	}
	if !isNil(o.EpochNumber) {
		toSerialize["epoch_number"] = o.EpochNumber
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !isNil(o.GasCoveredBySponsor) {
		toSerialize["gasCoveredBySponsor"] = o.GasCoveredBySponsor
	}
	if !isNil(o.GasFee) {
		toSerialize["gasFee"] = o.GasFee
	}
	if !isNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if !isNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if !isNil(o.PendingReason) {
		toSerialize["pending_reason"] = o.PendingReason
	}
	if !isNil(o.PreHashs) {
		toSerialize["pre_hashs"] = o.PreHashs
	}
	if !isNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.StorageCollateralized) {
		toSerialize["storageCollateralized"] = o.StorageCollateralized
	}
	if !isNil(o.StorageCoveredBySponsor) {
		toSerialize["storageCoveredBySponsor"] = o.StorageCoveredBySponsor
	}
	if !isNil(o.StorageLimit) {
		toSerialize["storageLimit"] = o.StorageLimit
	}
	if !isNil(o.TaskType) {
		toSerialize["taskType"] = o.TaskType
	}
	if !isNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !isNil(o.TryReceiptCnt) {
		toSerialize["tryReceiptCnt"] = o.TryReceiptCnt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ModelsTransaction) UnmarshalJSON(bytes []byte) (err error) {
	varModelsTransaction := _ModelsTransaction{}

	if err = json.Unmarshal(bytes, &varModelsTransaction); err == nil {
		*o = ModelsTransaction(varModelsTransaction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "chainId")
		delete(additionalProperties, "chainType")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "data")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "epochHeight")
		delete(additionalProperties, "epoch_number")
		delete(additionalProperties, "error")
		delete(additionalProperties, "from")
		delete(additionalProperties, "gas")
		delete(additionalProperties, "gasCoveredBySponsor")
		delete(additionalProperties, "gasFee")
		delete(additionalProperties, "gasPrice")
		delete(additionalProperties, "hash")
		delete(additionalProperties, "id")
		delete(additionalProperties, "nonce")
		delete(additionalProperties, "pending_reason")
		delete(additionalProperties, "pre_hashs")
		delete(additionalProperties, "stage")
		delete(additionalProperties, "state")
		delete(additionalProperties, "status")
		delete(additionalProperties, "storageCollateralized")
		delete(additionalProperties, "storageCoveredBySponsor")
		delete(additionalProperties, "storageLimit")
		delete(additionalProperties, "taskType")
		delete(additionalProperties, "to")
		delete(additionalProperties, "tryReceiptCnt")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsTransaction struct {
	value *ModelsTransaction
	isSet bool
}

func (v NullableModelsTransaction) Get() *ModelsTransaction {
	return v.value
}

func (v *NullableModelsTransaction) Set(val *ModelsTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTransaction(val *ModelsTransaction) *NullableModelsTransaction {
	return &NullableModelsTransaction{value: val, isSet: true}
}

func (v NullableModelsTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


