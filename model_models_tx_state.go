/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// ModelsTxState the model 'ModelsTxState'
type ModelsTxState int32

// List of models.TxState
const (
	MODELSTXSTATE_TX_STATE_PENDING_WAIT ModelsTxState = -10
	MODELSTXSTATE__RESERVE_1 ModelsTxState = -9
	MODELSTXSTATE__RESERVE_2 ModelsTxState = -8
	MODELSTXSTATE_TX_STATE_PENDING_TX_EMPTY_RETRY ModelsTxState = -7
	MODELSTXSTATE_TX_STATE_PENDING_RETRY_UPPER_GAS ModelsTxState = -6
	MODELSTXSTATE_TX_STATE_PENDING_RETRY ModelsTxState = -5
	MODELSTXSTATE_TX_STATE_SEND_FAILED_RETRY_UPPER_GAS ModelsTxState = -4
	MODELSTXSTATE_TX_STATE_SEND_FAILED_RETRY ModelsTxState = -3
	MODELSTXSTATE_TX_STATE_EXECUTE_FAILED ModelsTxState = -2
	MODELSTXSTATE_TX_STATE_SEND_FAILED ModelsTxState = -1
	MODELSTXSTATE_TX_STATE_INIT ModelsTxState = 0
	MODELSTXSTATE_TX_STATE_POPULATED ModelsTxState = 1
	MODELSTXSTATE_TX_STATE_READY_OR_INSERTED ModelsTxState = 2
	MODELSTXSTATE_TX_STATE_EXECUTED ModelsTxState = 3
	MODELSTXSTATE_TX_STATE_CONFIRMED ModelsTxState = 4
)

// All allowed values of ModelsTxState enum
var AllowedModelsTxStateEnumValues = []ModelsTxState{
	-10,
	-9,
	-8,
	-7,
	-6,
	-5,
	-4,
	-3,
	-2,
	-1,
	0,
	1,
	2,
	3,
	4,
}

func (v *ModelsTxState) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsTxState(value)
	for _, existing := range AllowedModelsTxStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsTxState", value)
}

// NewModelsTxStateFromValue returns a pointer to a valid ModelsTxState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsTxStateFromValue(v int32) (*ModelsTxState, error) {
	ev := ModelsTxState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsTxState: valid values are %v", v, AllowedModelsTxStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsTxState) IsValid() bool {
	for _, existing := range AllowedModelsTxStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.TxState value
func (v ModelsTxState) Ptr() *ModelsTxState {
	return &v
}

type NullableModelsTxState struct {
	value *ModelsTxState
	isSet bool
}

func (v NullableModelsTxState) Get() *ModelsTxState {
	return v.value
}

func (v *NullableModelsTxState) Set(val *ModelsTxState) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTxState) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTxState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTxState(val *ModelsTxState) *NullableModelsTxState {
	return &NullableModelsTxState{value: val, isSet: true}
}

func (v NullableModelsTxState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTxState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

