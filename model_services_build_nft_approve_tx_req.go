/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicesBuildNftApproveTxReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesBuildNftApproveTxReq{}

// ServicesBuildNftApproveTxReq struct for ServicesBuildNftApproveTxReq
type ServicesBuildNftApproveTxReq struct {
	Chain string `json:"chain"`
	ContractAddress string `json:"contract_address"`
	ContractType string `json:"contract_type"`
	From string `json:"from"`
	To string `json:"to"`
	TokenId string `json:"token_id"`
	AdditionalProperties map[string]interface{}
}

type _ServicesBuildNftApproveTxReq ServicesBuildNftApproveTxReq

// NewServicesBuildNftApproveTxReq instantiates a new ServicesBuildNftApproveTxReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesBuildNftApproveTxReq(chain string, contractAddress string, contractType string, from string, to string, tokenId string) *ServicesBuildNftApproveTxReq {
	this := ServicesBuildNftApproveTxReq{}
	this.Chain = chain
	this.ContractAddress = contractAddress
	this.ContractType = contractType
	this.From = from
	this.To = to
	this.TokenId = tokenId
	return &this
}

// NewServicesBuildNftApproveTxReqWithDefaults instantiates a new ServicesBuildNftApproveTxReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesBuildNftApproveTxReqWithDefaults() *ServicesBuildNftApproveTxReq {
	this := ServicesBuildNftApproveTxReq{}
	return &this
}

// GetChain returns the Chain field value
func (o *ServicesBuildNftApproveTxReq) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *ServicesBuildNftApproveTxReq) SetChain(v string) {
	o.Chain = v
}

// GetContractAddress returns the ContractAddress field value
func (o *ServicesBuildNftApproveTxReq) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *ServicesBuildNftApproveTxReq) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetContractType returns the ContractType field value
func (o *ServicesBuildNftApproveTxReq) GetContractType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetContractTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractType, true
}

// SetContractType sets field value
func (o *ServicesBuildNftApproveTxReq) SetContractType(v string) {
	o.ContractType = v
}

// GetFrom returns the From field value
func (o *ServicesBuildNftApproveTxReq) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *ServicesBuildNftApproveTxReq) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *ServicesBuildNftApproveTxReq) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *ServicesBuildNftApproveTxReq) SetTo(v string) {
	o.To = v
}

// GetTokenId returns the TokenId field value
func (o *ServicesBuildNftApproveTxReq) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildNftApproveTxReq) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *ServicesBuildNftApproveTxReq) SetTokenId(v string) {
	o.TokenId = v
}

func (o ServicesBuildNftApproveTxReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesBuildNftApproveTxReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	toSerialize["contract_address"] = o.ContractAddress
	toSerialize["contract_type"] = o.ContractType
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	toSerialize["token_id"] = o.TokenId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesBuildNftApproveTxReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"contract_address",
		"contract_type",
		"from",
		"to",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesBuildNftApproveTxReq := _ServicesBuildNftApproveTxReq{}

	err = json.Unmarshal(data, &varServicesBuildNftApproveTxReq)

	if err != nil {
		return err
	}

	*o = ServicesBuildNftApproveTxReq(varServicesBuildNftApproveTxReq)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "contract_address")
		delete(additionalProperties, "contract_type")
		delete(additionalProperties, "from")
		delete(additionalProperties, "to")
		delete(additionalProperties, "token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesBuildNftApproveTxReq struct {
	value *ServicesBuildNftApproveTxReq
	isSet bool
}

func (v NullableServicesBuildNftApproveTxReq) Get() *ServicesBuildNftApproveTxReq {
	return v.value
}

func (v *NullableServicesBuildNftApproveTxReq) Set(val *ServicesBuildNftApproveTxReq) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesBuildNftApproveTxReq) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesBuildNftApproveTxReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesBuildNftApproveTxReq(val *ServicesBuildNftApproveTxReq) *NullableServicesBuildNftApproveTxReq {
	return &NullableServicesBuildNftApproveTxReq{value: val, isSet: true}
}

func (v NullableServicesBuildNftApproveTxReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesBuildNftApproveTxReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


