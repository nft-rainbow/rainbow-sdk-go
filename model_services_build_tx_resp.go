/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicesBuildTxResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesBuildTxResp{}

// ServicesBuildTxResp struct for ServicesBuildTxResp
type ServicesBuildTxResp struct {
	Chain string `json:"chain"`
	Data *string `json:"data,omitempty"`
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesBuildTxResp ServicesBuildTxResp

// NewServicesBuildTxResp instantiates a new ServicesBuildTxResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesBuildTxResp(chain string) *ServicesBuildTxResp {
	this := ServicesBuildTxResp{}
	this.Chain = chain
	return &this
}

// NewServicesBuildTxRespWithDefaults instantiates a new ServicesBuildTxResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesBuildTxRespWithDefaults() *ServicesBuildTxResp {
	this := ServicesBuildTxResp{}
	return &this
}

// GetChain returns the Chain field value
func (o *ServicesBuildTxResp) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *ServicesBuildTxResp) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *ServicesBuildTxResp) SetChain(v string) {
	o.Chain = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServicesBuildTxResp) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesBuildTxResp) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServicesBuildTxResp) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ServicesBuildTxResp) SetData(v string) {
	o.Data = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ServicesBuildTxResp) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesBuildTxResp) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ServicesBuildTxResp) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ServicesBuildTxResp) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ServicesBuildTxResp) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesBuildTxResp) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ServicesBuildTxResp) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ServicesBuildTxResp) SetTo(v string) {
	o.To = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ServicesBuildTxResp) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesBuildTxResp) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ServicesBuildTxResp) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ServicesBuildTxResp) SetValue(v string) {
	o.Value = &v
}

func (o ServicesBuildTxResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesBuildTxResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesBuildTxResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesBuildTxResp := _ServicesBuildTxResp{}

	err = json.Unmarshal(data, &varServicesBuildTxResp)

	if err != nil {
		return err
	}

	*o = ServicesBuildTxResp(varServicesBuildTxResp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "data")
		delete(additionalProperties, "from")
		delete(additionalProperties, "to")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesBuildTxResp struct {
	value *ServicesBuildTxResp
	isSet bool
}

func (v NullableServicesBuildTxResp) Get() *ServicesBuildTxResp {
	return v.value
}

func (v *NullableServicesBuildTxResp) Set(val *ServicesBuildTxResp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesBuildTxResp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesBuildTxResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesBuildTxResp(val *ServicesBuildTxResp) *NullableServicesBuildTxResp {
	return &NullableServicesBuildTxResp{value: val, isSet: true}
}

func (v NullableServicesBuildTxResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesBuildTxResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


