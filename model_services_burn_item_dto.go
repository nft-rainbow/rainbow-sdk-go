/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// checks if the ServicesBurnItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesBurnItemDto{}

// ServicesBurnItemDto struct for ServicesBurnItemDto
type ServicesBurnItemDto struct {
	Amount *int32 `json:"amount,omitempty"`
	TokenId string `json:"token_id"`
	AdditionalProperties map[string]interface{}
}

type _ServicesBurnItemDto ServicesBurnItemDto

// NewServicesBurnItemDto instantiates a new ServicesBurnItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesBurnItemDto(tokenId string) *ServicesBurnItemDto {
	this := ServicesBurnItemDto{}
	this.TokenId = tokenId
	return &this
}

// NewServicesBurnItemDtoWithDefaults instantiates a new ServicesBurnItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesBurnItemDtoWithDefaults() *ServicesBurnItemDto {
	this := ServicesBurnItemDto{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ServicesBurnItemDto) GetAmount() int32 {
	if o == nil || isNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesBurnItemDto) GetAmountOk() (*int32, bool) {
	if o == nil || isNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ServicesBurnItemDto) HasAmount() bool {
	if o != nil && !isNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *ServicesBurnItemDto) SetAmount(v int32) {
	o.Amount = &v
}

// GetTokenId returns the TokenId field value
func (o *ServicesBurnItemDto) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *ServicesBurnItemDto) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *ServicesBurnItemDto) SetTokenId(v string) {
	o.TokenId = v
}

func (o ServicesBurnItemDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesBurnItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["token_id"] = o.TokenId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesBurnItemDto) UnmarshalJSON(bytes []byte) (err error) {
	varServicesBurnItemDto := _ServicesBurnItemDto{}

	if err = json.Unmarshal(bytes, &varServicesBurnItemDto); err == nil {
		*o = ServicesBurnItemDto(varServicesBurnItemDto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesBurnItemDto struct {
	value *ServicesBurnItemDto
	isSet bool
}

func (v NullableServicesBurnItemDto) Get() *ServicesBurnItemDto {
	return v.value
}

func (v *NullableServicesBurnItemDto) Set(val *ServicesBurnItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesBurnItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesBurnItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesBurnItemDto(val *ServicesBurnItemDto) *NullableServicesBurnItemDto {
	return &NullableServicesBurnItemDto{value: val, isSet: true}
}

func (v NullableServicesBurnItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesBurnItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


