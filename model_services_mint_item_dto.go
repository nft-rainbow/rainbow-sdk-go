/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicesMintItemDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesMintItemDto{}

// ServicesMintItemDto struct for ServicesMintItemDto
type ServicesMintItemDto struct {
	Amount *int32 `json:"amount,omitempty"`
	MetadataUri *string `json:"metadata_uri,omitempty"`
	MintToAddress string `json:"mint_to_address"`
	TokenId *string `json:"token_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesMintItemDto ServicesMintItemDto

// NewServicesMintItemDto instantiates a new ServicesMintItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesMintItemDto(mintToAddress string) *ServicesMintItemDto {
	this := ServicesMintItemDto{}
	this.MintToAddress = mintToAddress
	return &this
}

// NewServicesMintItemDtoWithDefaults instantiates a new ServicesMintItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesMintItemDtoWithDefaults() *ServicesMintItemDto {
	this := ServicesMintItemDto{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ServicesMintItemDto) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesMintItemDto) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ServicesMintItemDto) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *ServicesMintItemDto) SetAmount(v int32) {
	o.Amount = &v
}

// GetMetadataUri returns the MetadataUri field value if set, zero value otherwise.
func (o *ServicesMintItemDto) GetMetadataUri() string {
	if o == nil || IsNil(o.MetadataUri) {
		var ret string
		return ret
	}
	return *o.MetadataUri
}

// GetMetadataUriOk returns a tuple with the MetadataUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesMintItemDto) GetMetadataUriOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataUri) {
		return nil, false
	}
	return o.MetadataUri, true
}

// HasMetadataUri returns a boolean if a field has been set.
func (o *ServicesMintItemDto) HasMetadataUri() bool {
	if o != nil && !IsNil(o.MetadataUri) {
		return true
	}

	return false
}

// SetMetadataUri gets a reference to the given string and assigns it to the MetadataUri field.
func (o *ServicesMintItemDto) SetMetadataUri(v string) {
	o.MetadataUri = &v
}

// GetMintToAddress returns the MintToAddress field value
func (o *ServicesMintItemDto) GetMintToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MintToAddress
}

// GetMintToAddressOk returns a tuple with the MintToAddress field value
// and a boolean to check if the value has been set.
func (o *ServicesMintItemDto) GetMintToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintToAddress, true
}

// SetMintToAddress sets field value
func (o *ServicesMintItemDto) SetMintToAddress(v string) {
	o.MintToAddress = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *ServicesMintItemDto) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesMintItemDto) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *ServicesMintItemDto) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *ServicesMintItemDto) SetTokenId(v string) {
	o.TokenId = &v
}

func (o ServicesMintItemDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesMintItemDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.MetadataUri) {
		toSerialize["metadata_uri"] = o.MetadataUri
	}
	toSerialize["mint_to_address"] = o.MintToAddress
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesMintItemDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mint_to_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesMintItemDto := _ServicesMintItemDto{}

	err = json.Unmarshal(data, &varServicesMintItemDto)

	if err != nil {
		return err
	}

	*o = ServicesMintItemDto(varServicesMintItemDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "metadata_uri")
		delete(additionalProperties, "mint_to_address")
		delete(additionalProperties, "token_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesMintItemDto struct {
	value *ServicesMintItemDto
	isSet bool
}

func (v NullableServicesMintItemDto) Get() *ServicesMintItemDto {
	return v.value
}

func (v *NullableServicesMintItemDto) Set(val *ServicesMintItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesMintItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesMintItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesMintItemDto(val *ServicesMintItemDto) *NullableServicesMintItemDto {
	return &NullableServicesMintItemDto{value: val, isSet: true}
}

func (v NullableServicesMintItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesMintItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


