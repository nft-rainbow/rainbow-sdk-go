/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicesSendTxReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesSendTxReq{}

// ServicesSendTxReq struct for ServicesSendTxReq
type ServicesSendTxReq struct {
	Chain string `json:"chain"`
	Data *string `json:"data,omitempty"`
	// AccountId uint   `json:\"account_id\" form:\"account_id\" binding:\"required\"`
	From string `json:"from"`
	To string `json:"to"`
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesSendTxReq ServicesSendTxReq

// NewServicesSendTxReq instantiates a new ServicesSendTxReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesSendTxReq(chain string, from string, to string) *ServicesSendTxReq {
	this := ServicesSendTxReq{}
	this.Chain = chain
	this.From = from
	this.To = to
	return &this
}

// NewServicesSendTxReqWithDefaults instantiates a new ServicesSendTxReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesSendTxReqWithDefaults() *ServicesSendTxReq {
	this := ServicesSendTxReq{}
	return &this
}

// GetChain returns the Chain field value
func (o *ServicesSendTxReq) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *ServicesSendTxReq) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *ServicesSendTxReq) SetChain(v string) {
	o.Chain = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServicesSendTxReq) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesSendTxReq) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServicesSendTxReq) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ServicesSendTxReq) SetData(v string) {
	o.Data = &v
}

// GetFrom returns the From field value
func (o *ServicesSendTxReq) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *ServicesSendTxReq) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *ServicesSendTxReq) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *ServicesSendTxReq) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *ServicesSendTxReq) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *ServicesSendTxReq) SetTo(v string) {
	o.To = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ServicesSendTxReq) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesSendTxReq) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ServicesSendTxReq) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ServicesSendTxReq) SetValue(v string) {
	o.Value = &v
}

func (o ServicesSendTxReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesSendTxReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesSendTxReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesSendTxReq := _ServicesSendTxReq{}

	err = json.Unmarshal(data, &varServicesSendTxReq)

	if err != nil {
		return err
	}

	*o = ServicesSendTxReq(varServicesSendTxReq)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "data")
		delete(additionalProperties, "from")
		delete(additionalProperties, "to")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesSendTxReq struct {
	value *ServicesSendTxReq
	isSet bool
}

func (v NullableServicesSendTxReq) Get() *ServicesSendTxReq {
	return v.value
}

func (v *NullableServicesSendTxReq) Set(val *ServicesSendTxReq) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesSendTxReq) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesSendTxReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesSendTxReq(val *ServicesSendTxReq) *NullableServicesSendTxReq {
	return &NullableServicesSendTxReq{value: val, isSet: true}
}

func (v NullableServicesSendTxReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesSendTxReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


