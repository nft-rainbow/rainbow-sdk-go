/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// ServicesSendTxResp struct for ServicesSendTxResp
type ServicesSendTxResp struct {
	TxId *int32 `json:"tx_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesSendTxResp ServicesSendTxResp

// NewServicesSendTxResp instantiates a new ServicesSendTxResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesSendTxResp() *ServicesSendTxResp {
	this := ServicesSendTxResp{}
	return &this
}

// NewServicesSendTxRespWithDefaults instantiates a new ServicesSendTxResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesSendTxRespWithDefaults() *ServicesSendTxResp {
	this := ServicesSendTxResp{}
	return &this
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *ServicesSendTxResp) GetTxId() int32 {
	if o == nil || o.TxId == nil {
		var ret int32
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesSendTxResp) GetTxIdOk() (*int32, bool) {
	if o == nil || o.TxId == nil {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *ServicesSendTxResp) HasTxId() bool {
	if o != nil && o.TxId != nil {
		return true
	}

	return false
}

// SetTxId gets a reference to the given int32 and assigns it to the TxId field.
func (o *ServicesSendTxResp) SetTxId(v int32) {
	o.TxId = &v
}

func (o ServicesSendTxResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TxId != nil {
		toSerialize["tx_id"] = o.TxId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServicesSendTxResp) UnmarshalJSON(bytes []byte) (err error) {
	varServicesSendTxResp := _ServicesSendTxResp{}

	if err = json.Unmarshal(bytes, &varServicesSendTxResp); err == nil {
		*o = ServicesSendTxResp(varServicesSendTxResp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "tx_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesSendTxResp struct {
	value *ServicesSendTxResp
	isSet bool
}

func (v NullableServicesSendTxResp) Get() *ServicesSendTxResp {
	return v.value
}

func (v *NullableServicesSendTxResp) Set(val *ServicesSendTxResp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesSendTxResp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesSendTxResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesSendTxResp(val *ServicesSendTxResp) *NullableServicesSendTxResp {
	return &NullableServicesSendTxResp{value: val, isSet: true}
}

func (v NullableServicesSendTxResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesSendTxResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


