/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// checks if the ServicesTxResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesTxResp{}

// ServicesTxResp struct for ServicesTxResp
type ServicesTxResp struct {
	Data *string `json:"data,omitempty"`
	ErrorMsg *string `json:"error_msg,omitempty"`
	From *string `json:"from,omitempty"`
	Hash *string `json:"hash,omitempty"`
	IsFinalized *bool `json:"is_finalized,omitempty"`
	IsSuccess *bool `json:"is_success,omitempty"`
	Nonce *int32 `json:"nonce,omitempty"`
	StateCode *ModelsTxState `json:"state_code,omitempty"`
	StateMsg *string `json:"state_msg,omitempty"`
	To *string `json:"to,omitempty"`
	Value *float32 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesTxResp ServicesTxResp

// NewServicesTxResp instantiates a new ServicesTxResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesTxResp() *ServicesTxResp {
	this := ServicesTxResp{}
	return &this
}

// NewServicesTxRespWithDefaults instantiates a new ServicesTxResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesTxRespWithDefaults() *ServicesTxResp {
	this := ServicesTxResp{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServicesTxResp) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServicesTxResp) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ServicesTxResp) SetData(v string) {
	o.Data = &v
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *ServicesTxResp) GetErrorMsg() string {
	if o == nil || IsNil(o.ErrorMsg) {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetErrorMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMsg) {
		return nil, false
	}
	return o.ErrorMsg, true
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *ServicesTxResp) HasErrorMsg() bool {
	if o != nil && !IsNil(o.ErrorMsg) {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *ServicesTxResp) SetErrorMsg(v string) {
	o.ErrorMsg = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ServicesTxResp) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ServicesTxResp) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ServicesTxResp) SetFrom(v string) {
	o.From = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *ServicesTxResp) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *ServicesTxResp) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *ServicesTxResp) SetHash(v string) {
	o.Hash = &v
}

// GetIsFinalized returns the IsFinalized field value if set, zero value otherwise.
func (o *ServicesTxResp) GetIsFinalized() bool {
	if o == nil || IsNil(o.IsFinalized) {
		var ret bool
		return ret
	}
	return *o.IsFinalized
}

// GetIsFinalizedOk returns a tuple with the IsFinalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetIsFinalizedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFinalized) {
		return nil, false
	}
	return o.IsFinalized, true
}

// HasIsFinalized returns a boolean if a field has been set.
func (o *ServicesTxResp) HasIsFinalized() bool {
	if o != nil && !IsNil(o.IsFinalized) {
		return true
	}

	return false
}

// SetIsFinalized gets a reference to the given bool and assigns it to the IsFinalized field.
func (o *ServicesTxResp) SetIsFinalized(v bool) {
	o.IsFinalized = &v
}

// GetIsSuccess returns the IsSuccess field value if set, zero value otherwise.
func (o *ServicesTxResp) GetIsSuccess() bool {
	if o == nil || IsNil(o.IsSuccess) {
		var ret bool
		return ret
	}
	return *o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetIsSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuccess) {
		return nil, false
	}
	return o.IsSuccess, true
}

// HasIsSuccess returns a boolean if a field has been set.
func (o *ServicesTxResp) HasIsSuccess() bool {
	if o != nil && !IsNil(o.IsSuccess) {
		return true
	}

	return false
}

// SetIsSuccess gets a reference to the given bool and assigns it to the IsSuccess field.
func (o *ServicesTxResp) SetIsSuccess(v bool) {
	o.IsSuccess = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *ServicesTxResp) GetNonce() int32 {
	if o == nil || IsNil(o.Nonce) {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetNonceOk() (*int32, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *ServicesTxResp) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *ServicesTxResp) SetNonce(v int32) {
	o.Nonce = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *ServicesTxResp) GetStateCode() ModelsTxState {
	if o == nil || IsNil(o.StateCode) {
		var ret ModelsTxState
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetStateCodeOk() (*ModelsTxState, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *ServicesTxResp) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given ModelsTxState and assigns it to the StateCode field.
func (o *ServicesTxResp) SetStateCode(v ModelsTxState) {
	o.StateCode = &v
}

// GetStateMsg returns the StateMsg field value if set, zero value otherwise.
func (o *ServicesTxResp) GetStateMsg() string {
	if o == nil || IsNil(o.StateMsg) {
		var ret string
		return ret
	}
	return *o.StateMsg
}

// GetStateMsgOk returns a tuple with the StateMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetStateMsgOk() (*string, bool) {
	if o == nil || IsNil(o.StateMsg) {
		return nil, false
	}
	return o.StateMsg, true
}

// HasStateMsg returns a boolean if a field has been set.
func (o *ServicesTxResp) HasStateMsg() bool {
	if o != nil && !IsNil(o.StateMsg) {
		return true
	}

	return false
}

// SetStateMsg gets a reference to the given string and assigns it to the StateMsg field.
func (o *ServicesTxResp) SetStateMsg(v string) {
	o.StateMsg = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ServicesTxResp) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ServicesTxResp) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ServicesTxResp) SetTo(v string) {
	o.To = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ServicesTxResp) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesTxResp) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ServicesTxResp) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *ServicesTxResp) SetValue(v float32) {
	o.Value = &v
}

func (o ServicesTxResp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesTxResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.ErrorMsg) {
		toSerialize["error_msg"] = o.ErrorMsg
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.IsFinalized) {
		toSerialize["is_finalized"] = o.IsFinalized
	}
	if !IsNil(o.IsSuccess) {
		toSerialize["is_success"] = o.IsSuccess
	}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if !IsNil(o.StateCode) {
		toSerialize["state_code"] = o.StateCode
	}
	if !IsNil(o.StateMsg) {
		toSerialize["state_msg"] = o.StateMsg
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesTxResp) UnmarshalJSON(data []byte) (err error) {
	varServicesTxResp := _ServicesTxResp{}

	err = json.Unmarshal(data, &varServicesTxResp)

	if err != nil {
		return err
	}

	*o = ServicesTxResp(varServicesTxResp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "error_msg")
		delete(additionalProperties, "from")
		delete(additionalProperties, "hash")
		delete(additionalProperties, "is_finalized")
		delete(additionalProperties, "is_success")
		delete(additionalProperties, "nonce")
		delete(additionalProperties, "state_code")
		delete(additionalProperties, "state_msg")
		delete(additionalProperties, "to")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesTxResp struct {
	value *ServicesTxResp
	isSet bool
}

func (v NullableServicesTxResp) Get() *ServicesTxResp {
	return v.value
}

func (v *NullableServicesTxResp) Set(val *ServicesTxResp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesTxResp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesTxResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesTxResp(val *ServicesTxResp) *NullableServicesTxResp {
	return &NullableServicesTxResp{value: val, isSet: true}
}

func (v NullableServicesTxResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesTxResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


