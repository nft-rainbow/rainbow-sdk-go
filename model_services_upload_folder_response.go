/*
Rainbow-API

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rainbowsdk

import (
	"encoding/json"
)

// checks if the ServicesUploadFolderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesUploadFolderResponse{}

// ServicesUploadFolderResponse struct for ServicesUploadFolderResponse
type ServicesUploadFolderResponse struct {
	FileNum *int32 `json:"file_num,omitempty"`
	FolderUrl *string `json:"folder_url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesUploadFolderResponse ServicesUploadFolderResponse

// NewServicesUploadFolderResponse instantiates a new ServicesUploadFolderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesUploadFolderResponse() *ServicesUploadFolderResponse {
	this := ServicesUploadFolderResponse{}
	return &this
}

// NewServicesUploadFolderResponseWithDefaults instantiates a new ServicesUploadFolderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesUploadFolderResponseWithDefaults() *ServicesUploadFolderResponse {
	this := ServicesUploadFolderResponse{}
	return &this
}

// GetFileNum returns the FileNum field value if set, zero value otherwise.
func (o *ServicesUploadFolderResponse) GetFileNum() int32 {
	if o == nil || isNil(o.FileNum) {
		var ret int32
		return ret
	}
	return *o.FileNum
}

// GetFileNumOk returns a tuple with the FileNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesUploadFolderResponse) GetFileNumOk() (*int32, bool) {
	if o == nil || isNil(o.FileNum) {
		return nil, false
	}
	return o.FileNum, true
}

// HasFileNum returns a boolean if a field has been set.
func (o *ServicesUploadFolderResponse) HasFileNum() bool {
	if o != nil && !isNil(o.FileNum) {
		return true
	}

	return false
}

// SetFileNum gets a reference to the given int32 and assigns it to the FileNum field.
func (o *ServicesUploadFolderResponse) SetFileNum(v int32) {
	o.FileNum = &v
}

// GetFolderUrl returns the FolderUrl field value if set, zero value otherwise.
func (o *ServicesUploadFolderResponse) GetFolderUrl() string {
	if o == nil || isNil(o.FolderUrl) {
		var ret string
		return ret
	}
	return *o.FolderUrl
}

// GetFolderUrlOk returns a tuple with the FolderUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesUploadFolderResponse) GetFolderUrlOk() (*string, bool) {
	if o == nil || isNil(o.FolderUrl) {
		return nil, false
	}
	return o.FolderUrl, true
}

// HasFolderUrl returns a boolean if a field has been set.
func (o *ServicesUploadFolderResponse) HasFolderUrl() bool {
	if o != nil && !isNil(o.FolderUrl) {
		return true
	}

	return false
}

// SetFolderUrl gets a reference to the given string and assigns it to the FolderUrl field.
func (o *ServicesUploadFolderResponse) SetFolderUrl(v string) {
	o.FolderUrl = &v
}

func (o ServicesUploadFolderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesUploadFolderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FileNum) {
		toSerialize["file_num"] = o.FileNum
	}
	if !isNil(o.FolderUrl) {
		toSerialize["folder_url"] = o.FolderUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesUploadFolderResponse) UnmarshalJSON(bytes []byte) (err error) {
	varServicesUploadFolderResponse := _ServicesUploadFolderResponse{}

	if err = json.Unmarshal(bytes, &varServicesUploadFolderResponse); err == nil {
		*o = ServicesUploadFolderResponse(varServicesUploadFolderResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "file_num")
		delete(additionalProperties, "folder_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesUploadFolderResponse struct {
	value *ServicesUploadFolderResponse
	isSet bool
}

func (v NullableServicesUploadFolderResponse) Get() *ServicesUploadFolderResponse {
	return v.value
}

func (v *NullableServicesUploadFolderResponse) Set(val *ServicesUploadFolderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesUploadFolderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesUploadFolderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesUploadFolderResponse(val *ServicesUploadFolderResponse) *NullableServicesUploadFolderResponse {
	return &NullableServicesUploadFolderResponse{value: val, isSet: true}
}

func (v NullableServicesUploadFolderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesUploadFolderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


